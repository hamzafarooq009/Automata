Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    MINUSMINUS
    NEWLINE
    PERCENTAGE
    PLUSPLUS

Grammar

Rule 0     S' -> element
Rule 1     element -> stmt SEMICOLON
Rule 2     stmt -> DISPLAY LROUND optparams RROUND
Rule 3     optparams -> params l_comma params
Rule 4     optparams -> <empty>
Rule 5     params -> exp
Rule 6     stmt -> if elseif else
Rule 7     if -> IF exp c_stmt
Rule 8     elseif -> ELSEIF c_exp c_stmt elseif
Rule 9     c_exp -> exp
Rule 10    elseif -> <empty>
Rule 11    else -> ELSE c_stmt
Rule 12    else -> <empty>
Rule 13    c_stmt -> LCURLY c_stmt RCURLY
Rule 14    c_stmt -> stmt
Rule 15    c_stmt -> <empty>
Rule 16    stmt -> TYPE IDENTIFIER ASSIGN LSQBRAC listparams RSQBRAC
Rule 17    l_comma -> COMMA
Rule 18    l_comma -> <empty>
Rule 19    listparams -> INT l_comma listparams
Rule 20    listparams -> DOUBLE l_comma listparams
Rule 21    listparams -> STRING l_comma listparams
Rule 22    listparams -> CHAR l_comma listparams
Rule 23    listparams -> BOOL l_comma listparams
Rule 24    listparams -> <empty>
Rule 25    exp -> IDENTIFIER LSQBRAC optparams RSQBRAC
Rule 26    exp -> IDENTIFIER DOT list_functions
Rule 27    list_functions -> PUSH LROUND pparams RROUND
Rule 28    list_functions -> POP LROUND pparams RROUND
Rule 29    list_functions -> SLICE LROUND sliceparams RROUND
Rule 30    list_functions -> INDEX LROUND indexparams RROUND
Rule 31    indexparams -> exp
Rule 32    sliceparams -> INT
Rule 33    sliceparams -> INT COMMA INT
Rule 34    sliceparams -> <empty>
Rule 35    pparams -> exp
Rule 36    pparams -> <empty>
Rule 37    stmt -> IDENTIFIER ASSIGN exp
Rule 38    stmt -> TYPE IDENTIFIER
Rule 39    stmt -> TYPE IDENTIFIER ASSIGN exp
Rule 40    stmt -> exp
Rule 41    exp -> LROUND exp RROUND
Rule 42    exp -> BOOL
Rule 43    exp -> IDENTIFIER
Rule 44    exp -> STRING
Rule 45    exp -> INT
Rule 46    exp -> DOUBLE
Rule 47    exp -> CHAR
Rule 48    exp -> exp PLUS exp
Rule 49    exp -> LROUND exp PLUS exp RROUND
Rule 50    exp -> exp MINUS exp
Rule 51    exp -> exp MULTIPLY exp
Rule 52    exp -> exp DIVIDE exp
Rule 53    exp -> NOT exp
Rule 54    exp -> exp AND exp
Rule 55    exp -> exp OR exp
Rule 56    exp -> exp LESSTHAN exp
Rule 57    exp -> exp GREATERTHAN exp
Rule 58    exp -> exp LESSEQUAL exp
Rule 59    exp -> exp GREATEREQUAL exp
Rule 60    exp -> exp NOTEQUAL exp
Rule 61    exp -> exp EQUALS exp
Rule 62    exp -> exp POW exp

Terminals, with rules where they appear

AND                  : 54
ASSIGN               : 16 37 39
BOOL                 : 23 42
CHAR                 : 22 47
COMMA                : 17 33
DISPLAY              : 2
DIVIDE               : 52
DOT                  : 26
DOUBLE               : 20 46
ELSE                 : 11
ELSEIF               : 8
EQUALS               : 61
GREATEREQUAL         : 59
GREATERTHAN          : 57
IDENTIFIER           : 16 25 26 37 38 39 43
IF                   : 7
INDEX                : 30
INT                  : 19 32 33 33 45
LCURLY               : 13
LESSEQUAL            : 58
LESSTHAN             : 56
LROUND               : 2 27 28 29 30 41 49
LSQBRAC              : 16 25
MINUS                : 50
MINUSMINUS           : 
MULTIPLY             : 51
NEWLINE              : 
NOT                  : 53
NOTEQUAL             : 60
OR                   : 55
PERCENTAGE           : 
PLUS                 : 48 49
PLUSPLUS             : 
POP                  : 28
POW                  : 62
PUSH                 : 27
RCURLY               : 13
RROUND               : 2 27 28 29 30 41 49
RSQBRAC              : 16 25
SEMICOLON            : 1
SLICE                : 29
STRING               : 21 44
TYPE                 : 16 38 39
error                : 

Nonterminals, with rules where they appear

c_exp                : 8
c_stmt               : 7 8 11 13
element              : 0
else                 : 6
elseif               : 6 8
exp                  : 5 7 9 31 35 37 39 40 41 48 48 49 49 50 50 51 51 52 52 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62
if                   : 6
indexparams          : 30
l_comma              : 3 19 20 21 22 23
list_functions       : 26
listparams           : 16 19 20 21 22 23
optparams            : 2 25
params               : 3 3
pparams              : 27 28
sliceparams          : 29
stmt                 : 1 14

Parsing method: LALR

state 0

    (0) S' -> . element
    (1) element -> . stmt SEMICOLON
    (2) stmt -> . DISPLAY LROUND optparams RROUND
    (6) stmt -> . if elseif else
    (16) stmt -> . TYPE IDENTIFIER ASSIGN LSQBRAC listparams RSQBRAC
    (37) stmt -> . IDENTIFIER ASSIGN exp
    (38) stmt -> . TYPE IDENTIFIER
    (39) stmt -> . TYPE IDENTIFIER ASSIGN exp
    (40) stmt -> . exp
    (7) if -> . IF exp c_stmt
    (25) exp -> . IDENTIFIER LSQBRAC optparams RSQBRAC
    (26) exp -> . IDENTIFIER DOT list_functions
    (41) exp -> . LROUND exp RROUND
    (42) exp -> . BOOL
    (43) exp -> . IDENTIFIER
    (44) exp -> . STRING
    (45) exp -> . INT
    (46) exp -> . DOUBLE
    (47) exp -> . CHAR
    (48) exp -> . exp PLUS exp
    (49) exp -> . LROUND exp PLUS exp RROUND
    (50) exp -> . exp MINUS exp
    (51) exp -> . exp MULTIPLY exp
    (52) exp -> . exp DIVIDE exp
    (53) exp -> . NOT exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . exp LESSTHAN exp
    (57) exp -> . exp GREATERTHAN exp
    (58) exp -> . exp LESSEQUAL exp
    (59) exp -> . exp GREATEREQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp POW exp

    DISPLAY         shift and go to state 3
    TYPE            shift and go to state 6
    IDENTIFIER      shift and go to state 7
    IF              shift and go to state 9
    LROUND          shift and go to state 4
    BOOL            shift and go to state 10
    STRING          shift and go to state 11
    INT             shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    NOT             shift and go to state 15

    element                        shift and go to state 1
    stmt                           shift and go to state 2
    if                             shift and go to state 5
    exp                            shift and go to state 8

state 1

    (0) S' -> element .



state 2

    (1) element -> stmt . SEMICOLON

    SEMICOLON       shift and go to state 16


state 3

    (2) stmt -> DISPLAY . LROUND optparams RROUND

    LROUND          shift and go to state 17


state 4

    (41) exp -> LROUND . exp RROUND
    (49) exp -> LROUND . exp PLUS exp RROUND
    (25) exp -> . IDENTIFIER LSQBRAC optparams RSQBRAC
    (26) exp -> . IDENTIFIER DOT list_functions
    (41) exp -> . LROUND exp RROUND
    (42) exp -> . BOOL
    (43) exp -> . IDENTIFIER
    (44) exp -> . STRING
    (45) exp -> . INT
    (46) exp -> . DOUBLE
    (47) exp -> . CHAR
    (48) exp -> . exp PLUS exp
    (49) exp -> . LROUND exp PLUS exp RROUND
    (50) exp -> . exp MINUS exp
    (51) exp -> . exp MULTIPLY exp
    (52) exp -> . exp DIVIDE exp
    (53) exp -> . NOT exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . exp LESSTHAN exp
    (57) exp -> . exp GREATERTHAN exp
    (58) exp -> . exp LESSEQUAL exp
    (59) exp -> . exp GREATEREQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp POW exp

    IDENTIFIER      shift and go to state 19
    LROUND          shift and go to state 4
    BOOL            shift and go to state 10
    STRING          shift and go to state 11
    INT             shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    NOT             shift and go to state 15

    exp                            shift and go to state 18

state 5

    (6) stmt -> if . elseif else
    (8) elseif -> . ELSEIF c_exp c_stmt elseif
    (10) elseif -> .

  ! shift/reduce conflict for ELSEIF resolved as shift
    ELSEIF          shift and go to state 21
    ELSE            reduce using rule 10 (elseif -> .)
    SEMICOLON       reduce using rule 10 (elseif -> .)
    RCURLY          reduce using rule 10 (elseif -> .)

  ! ELSEIF          [ reduce using rule 10 (elseif -> .) ]

    elseif                         shift and go to state 20

state 6

    (16) stmt -> TYPE . IDENTIFIER ASSIGN LSQBRAC listparams RSQBRAC
    (38) stmt -> TYPE . IDENTIFIER
    (39) stmt -> TYPE . IDENTIFIER ASSIGN exp

    IDENTIFIER      shift and go to state 22


state 7

    (37) stmt -> IDENTIFIER . ASSIGN exp
    (25) exp -> IDENTIFIER . LSQBRAC optparams RSQBRAC
    (26) exp -> IDENTIFIER . DOT list_functions
    (43) exp -> IDENTIFIER .

    ASSIGN          shift and go to state 23
    LSQBRAC         shift and go to state 24
    DOT             shift and go to state 25
    PLUS            reduce using rule 43 (exp -> IDENTIFIER .)
    MINUS           reduce using rule 43 (exp -> IDENTIFIER .)
    MULTIPLY        reduce using rule 43 (exp -> IDENTIFIER .)
    DIVIDE          reduce using rule 43 (exp -> IDENTIFIER .)
    AND             reduce using rule 43 (exp -> IDENTIFIER .)
    OR              reduce using rule 43 (exp -> IDENTIFIER .)
    LESSTHAN        reduce using rule 43 (exp -> IDENTIFIER .)
    GREATERTHAN     reduce using rule 43 (exp -> IDENTIFIER .)
    LESSEQUAL       reduce using rule 43 (exp -> IDENTIFIER .)
    GREATEREQUAL    reduce using rule 43 (exp -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 43 (exp -> IDENTIFIER .)
    EQUALS          reduce using rule 43 (exp -> IDENTIFIER .)
    POW             reduce using rule 43 (exp -> IDENTIFIER .)
    SEMICOLON       reduce using rule 43 (exp -> IDENTIFIER .)
    ELSE            reduce using rule 43 (exp -> IDENTIFIER .)
    ELSEIF          reduce using rule 43 (exp -> IDENTIFIER .)
    RCURLY          reduce using rule 43 (exp -> IDENTIFIER .)


state 8

    (40) stmt -> exp .
    (48) exp -> exp . PLUS exp
    (50) exp -> exp . MINUS exp
    (51) exp -> exp . MULTIPLY exp
    (52) exp -> exp . DIVIDE exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (56) exp -> exp . LESSTHAN exp
    (57) exp -> exp . GREATERTHAN exp
    (58) exp -> exp . LESSEQUAL exp
    (59) exp -> exp . GREATEREQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . POW exp

    SEMICOLON       reduce using rule 40 (stmt -> exp .)
    ELSE            reduce using rule 40 (stmt -> exp .)
    ELSEIF          reduce using rule 40 (stmt -> exp .)
    RCURLY          reduce using rule 40 (stmt -> exp .)
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    AND             shift and go to state 30
    OR              shift and go to state 31
    LESSTHAN        shift and go to state 32
    GREATERTHAN     shift and go to state 33
    LESSEQUAL       shift and go to state 34
    GREATEREQUAL    shift and go to state 35
    NOTEQUAL        shift and go to state 36
    EQUALS          shift and go to state 37
    POW             shift and go to state 38


state 9

    (7) if -> IF . exp c_stmt
    (25) exp -> . IDENTIFIER LSQBRAC optparams RSQBRAC
    (26) exp -> . IDENTIFIER DOT list_functions
    (41) exp -> . LROUND exp RROUND
    (42) exp -> . BOOL
    (43) exp -> . IDENTIFIER
    (44) exp -> . STRING
    (45) exp -> . INT
    (46) exp -> . DOUBLE
    (47) exp -> . CHAR
    (48) exp -> . exp PLUS exp
    (49) exp -> . LROUND exp PLUS exp RROUND
    (50) exp -> . exp MINUS exp
    (51) exp -> . exp MULTIPLY exp
    (52) exp -> . exp DIVIDE exp
    (53) exp -> . NOT exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . exp LESSTHAN exp
    (57) exp -> . exp GREATERTHAN exp
    (58) exp -> . exp LESSEQUAL exp
    (59) exp -> . exp GREATEREQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp POW exp

    IDENTIFIER      shift and go to state 19
    LROUND          shift and go to state 4
    BOOL            shift and go to state 10
    STRING          shift and go to state 11
    INT             shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    NOT             shift and go to state 15

    exp                            shift and go to state 39

state 10

    (42) exp -> BOOL .

    PLUS            reduce using rule 42 (exp -> BOOL .)
    MINUS           reduce using rule 42 (exp -> BOOL .)
    MULTIPLY        reduce using rule 42 (exp -> BOOL .)
    DIVIDE          reduce using rule 42 (exp -> BOOL .)
    AND             reduce using rule 42 (exp -> BOOL .)
    OR              reduce using rule 42 (exp -> BOOL .)
    LESSTHAN        reduce using rule 42 (exp -> BOOL .)
    GREATERTHAN     reduce using rule 42 (exp -> BOOL .)
    LESSEQUAL       reduce using rule 42 (exp -> BOOL .)
    GREATEREQUAL    reduce using rule 42 (exp -> BOOL .)
    NOTEQUAL        reduce using rule 42 (exp -> BOOL .)
    EQUALS          reduce using rule 42 (exp -> BOOL .)
    POW             reduce using rule 42 (exp -> BOOL .)
    SEMICOLON       reduce using rule 42 (exp -> BOOL .)
    RROUND          reduce using rule 42 (exp -> BOOL .)
    LCURLY          reduce using rule 42 (exp -> BOOL .)
    DISPLAY         reduce using rule 42 (exp -> BOOL .)
    TYPE            reduce using rule 42 (exp -> BOOL .)
    IDENTIFIER      reduce using rule 42 (exp -> BOOL .)
    IF              reduce using rule 42 (exp -> BOOL .)
    LROUND          reduce using rule 42 (exp -> BOOL .)
    BOOL            reduce using rule 42 (exp -> BOOL .)
    STRING          reduce using rule 42 (exp -> BOOL .)
    INT             reduce using rule 42 (exp -> BOOL .)
    DOUBLE          reduce using rule 42 (exp -> BOOL .)
    CHAR            reduce using rule 42 (exp -> BOOL .)
    NOT             reduce using rule 42 (exp -> BOOL .)
    ELSEIF          reduce using rule 42 (exp -> BOOL .)
    ELSE            reduce using rule 42 (exp -> BOOL .)
    RCURLY          reduce using rule 42 (exp -> BOOL .)
    COMMA           reduce using rule 42 (exp -> BOOL .)
    RSQBRAC         reduce using rule 42 (exp -> BOOL .)


state 11

    (44) exp -> STRING .

    PLUS            reduce using rule 44 (exp -> STRING .)
    MINUS           reduce using rule 44 (exp -> STRING .)
    MULTIPLY        reduce using rule 44 (exp -> STRING .)
    DIVIDE          reduce using rule 44 (exp -> STRING .)
    AND             reduce using rule 44 (exp -> STRING .)
    OR              reduce using rule 44 (exp -> STRING .)
    LESSTHAN        reduce using rule 44 (exp -> STRING .)
    GREATERTHAN     reduce using rule 44 (exp -> STRING .)
    LESSEQUAL       reduce using rule 44 (exp -> STRING .)
    GREATEREQUAL    reduce using rule 44 (exp -> STRING .)
    NOTEQUAL        reduce using rule 44 (exp -> STRING .)
    EQUALS          reduce using rule 44 (exp -> STRING .)
    POW             reduce using rule 44 (exp -> STRING .)
    SEMICOLON       reduce using rule 44 (exp -> STRING .)
    RROUND          reduce using rule 44 (exp -> STRING .)
    LCURLY          reduce using rule 44 (exp -> STRING .)
    DISPLAY         reduce using rule 44 (exp -> STRING .)
    TYPE            reduce using rule 44 (exp -> STRING .)
    IDENTIFIER      reduce using rule 44 (exp -> STRING .)
    IF              reduce using rule 44 (exp -> STRING .)
    LROUND          reduce using rule 44 (exp -> STRING .)
    BOOL            reduce using rule 44 (exp -> STRING .)
    STRING          reduce using rule 44 (exp -> STRING .)
    INT             reduce using rule 44 (exp -> STRING .)
    DOUBLE          reduce using rule 44 (exp -> STRING .)
    CHAR            reduce using rule 44 (exp -> STRING .)
    NOT             reduce using rule 44 (exp -> STRING .)
    ELSEIF          reduce using rule 44 (exp -> STRING .)
    ELSE            reduce using rule 44 (exp -> STRING .)
    RCURLY          reduce using rule 44 (exp -> STRING .)
    COMMA           reduce using rule 44 (exp -> STRING .)
    RSQBRAC         reduce using rule 44 (exp -> STRING .)


state 12

    (45) exp -> INT .

    PLUS            reduce using rule 45 (exp -> INT .)
    MINUS           reduce using rule 45 (exp -> INT .)
    MULTIPLY        reduce using rule 45 (exp -> INT .)
    DIVIDE          reduce using rule 45 (exp -> INT .)
    AND             reduce using rule 45 (exp -> INT .)
    OR              reduce using rule 45 (exp -> INT .)
    LESSTHAN        reduce using rule 45 (exp -> INT .)
    GREATERTHAN     reduce using rule 45 (exp -> INT .)
    LESSEQUAL       reduce using rule 45 (exp -> INT .)
    GREATEREQUAL    reduce using rule 45 (exp -> INT .)
    NOTEQUAL        reduce using rule 45 (exp -> INT .)
    EQUALS          reduce using rule 45 (exp -> INT .)
    POW             reduce using rule 45 (exp -> INT .)
    SEMICOLON       reduce using rule 45 (exp -> INT .)
    RROUND          reduce using rule 45 (exp -> INT .)
    LCURLY          reduce using rule 45 (exp -> INT .)
    DISPLAY         reduce using rule 45 (exp -> INT .)
    TYPE            reduce using rule 45 (exp -> INT .)
    IDENTIFIER      reduce using rule 45 (exp -> INT .)
    IF              reduce using rule 45 (exp -> INT .)
    LROUND          reduce using rule 45 (exp -> INT .)
    BOOL            reduce using rule 45 (exp -> INT .)
    STRING          reduce using rule 45 (exp -> INT .)
    INT             reduce using rule 45 (exp -> INT .)
    DOUBLE          reduce using rule 45 (exp -> INT .)
    CHAR            reduce using rule 45 (exp -> INT .)
    NOT             reduce using rule 45 (exp -> INT .)
    ELSEIF          reduce using rule 45 (exp -> INT .)
    ELSE            reduce using rule 45 (exp -> INT .)
    RCURLY          reduce using rule 45 (exp -> INT .)
    COMMA           reduce using rule 45 (exp -> INT .)
    RSQBRAC         reduce using rule 45 (exp -> INT .)


state 13

    (46) exp -> DOUBLE .

    PLUS            reduce using rule 46 (exp -> DOUBLE .)
    MINUS           reduce using rule 46 (exp -> DOUBLE .)
    MULTIPLY        reduce using rule 46 (exp -> DOUBLE .)
    DIVIDE          reduce using rule 46 (exp -> DOUBLE .)
    AND             reduce using rule 46 (exp -> DOUBLE .)
    OR              reduce using rule 46 (exp -> DOUBLE .)
    LESSTHAN        reduce using rule 46 (exp -> DOUBLE .)
    GREATERTHAN     reduce using rule 46 (exp -> DOUBLE .)
    LESSEQUAL       reduce using rule 46 (exp -> DOUBLE .)
    GREATEREQUAL    reduce using rule 46 (exp -> DOUBLE .)
    NOTEQUAL        reduce using rule 46 (exp -> DOUBLE .)
    EQUALS          reduce using rule 46 (exp -> DOUBLE .)
    POW             reduce using rule 46 (exp -> DOUBLE .)
    SEMICOLON       reduce using rule 46 (exp -> DOUBLE .)
    RROUND          reduce using rule 46 (exp -> DOUBLE .)
    LCURLY          reduce using rule 46 (exp -> DOUBLE .)
    DISPLAY         reduce using rule 46 (exp -> DOUBLE .)
    TYPE            reduce using rule 46 (exp -> DOUBLE .)
    IDENTIFIER      reduce using rule 46 (exp -> DOUBLE .)
    IF              reduce using rule 46 (exp -> DOUBLE .)
    LROUND          reduce using rule 46 (exp -> DOUBLE .)
    BOOL            reduce using rule 46 (exp -> DOUBLE .)
    STRING          reduce using rule 46 (exp -> DOUBLE .)
    INT             reduce using rule 46 (exp -> DOUBLE .)
    DOUBLE          reduce using rule 46 (exp -> DOUBLE .)
    CHAR            reduce using rule 46 (exp -> DOUBLE .)
    NOT             reduce using rule 46 (exp -> DOUBLE .)
    ELSEIF          reduce using rule 46 (exp -> DOUBLE .)
    ELSE            reduce using rule 46 (exp -> DOUBLE .)
    RCURLY          reduce using rule 46 (exp -> DOUBLE .)
    COMMA           reduce using rule 46 (exp -> DOUBLE .)
    RSQBRAC         reduce using rule 46 (exp -> DOUBLE .)


state 14

    (47) exp -> CHAR .

    PLUS            reduce using rule 47 (exp -> CHAR .)
    MINUS           reduce using rule 47 (exp -> CHAR .)
    MULTIPLY        reduce using rule 47 (exp -> CHAR .)
    DIVIDE          reduce using rule 47 (exp -> CHAR .)
    AND             reduce using rule 47 (exp -> CHAR .)
    OR              reduce using rule 47 (exp -> CHAR .)
    LESSTHAN        reduce using rule 47 (exp -> CHAR .)
    GREATERTHAN     reduce using rule 47 (exp -> CHAR .)
    LESSEQUAL       reduce using rule 47 (exp -> CHAR .)
    GREATEREQUAL    reduce using rule 47 (exp -> CHAR .)
    NOTEQUAL        reduce using rule 47 (exp -> CHAR .)
    EQUALS          reduce using rule 47 (exp -> CHAR .)
    POW             reduce using rule 47 (exp -> CHAR .)
    SEMICOLON       reduce using rule 47 (exp -> CHAR .)
    RROUND          reduce using rule 47 (exp -> CHAR .)
    LCURLY          reduce using rule 47 (exp -> CHAR .)
    DISPLAY         reduce using rule 47 (exp -> CHAR .)
    TYPE            reduce using rule 47 (exp -> CHAR .)
    IDENTIFIER      reduce using rule 47 (exp -> CHAR .)
    IF              reduce using rule 47 (exp -> CHAR .)
    LROUND          reduce using rule 47 (exp -> CHAR .)
    BOOL            reduce using rule 47 (exp -> CHAR .)
    STRING          reduce using rule 47 (exp -> CHAR .)
    INT             reduce using rule 47 (exp -> CHAR .)
    DOUBLE          reduce using rule 47 (exp -> CHAR .)
    CHAR            reduce using rule 47 (exp -> CHAR .)
    NOT             reduce using rule 47 (exp -> CHAR .)
    ELSEIF          reduce using rule 47 (exp -> CHAR .)
    ELSE            reduce using rule 47 (exp -> CHAR .)
    RCURLY          reduce using rule 47 (exp -> CHAR .)
    COMMA           reduce using rule 47 (exp -> CHAR .)
    RSQBRAC         reduce using rule 47 (exp -> CHAR .)


state 15

    (53) exp -> NOT . exp
    (25) exp -> . IDENTIFIER LSQBRAC optparams RSQBRAC
    (26) exp -> . IDENTIFIER DOT list_functions
    (41) exp -> . LROUND exp RROUND
    (42) exp -> . BOOL
    (43) exp -> . IDENTIFIER
    (44) exp -> . STRING
    (45) exp -> . INT
    (46) exp -> . DOUBLE
    (47) exp -> . CHAR
    (48) exp -> . exp PLUS exp
    (49) exp -> . LROUND exp PLUS exp RROUND
    (50) exp -> . exp MINUS exp
    (51) exp -> . exp MULTIPLY exp
    (52) exp -> . exp DIVIDE exp
    (53) exp -> . NOT exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . exp LESSTHAN exp
    (57) exp -> . exp GREATERTHAN exp
    (58) exp -> . exp LESSEQUAL exp
    (59) exp -> . exp GREATEREQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp POW exp

    IDENTIFIER      shift and go to state 19
    LROUND          shift and go to state 4
    BOOL            shift and go to state 10
    STRING          shift and go to state 11
    INT             shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    NOT             shift and go to state 15

    exp                            shift and go to state 40

state 16

    (1) element -> stmt SEMICOLON .

    $end            reduce using rule 1 (element -> stmt SEMICOLON .)


state 17

    (2) stmt -> DISPLAY LROUND . optparams RROUND
    (3) optparams -> . params l_comma params
    (4) optparams -> .
    (5) params -> . exp
    (25) exp -> . IDENTIFIER LSQBRAC optparams RSQBRAC
    (26) exp -> . IDENTIFIER DOT list_functions
    (41) exp -> . LROUND exp RROUND
    (42) exp -> . BOOL
    (43) exp -> . IDENTIFIER
    (44) exp -> . STRING
    (45) exp -> . INT
    (46) exp -> . DOUBLE
    (47) exp -> . CHAR
    (48) exp -> . exp PLUS exp
    (49) exp -> . LROUND exp PLUS exp RROUND
    (50) exp -> . exp MINUS exp
    (51) exp -> . exp MULTIPLY exp
    (52) exp -> . exp DIVIDE exp
    (53) exp -> . NOT exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . exp LESSTHAN exp
    (57) exp -> . exp GREATERTHAN exp
    (58) exp -> . exp LESSEQUAL exp
    (59) exp -> . exp GREATEREQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp POW exp

    RROUND          reduce using rule 4 (optparams -> .)
    IDENTIFIER      shift and go to state 19
    LROUND          shift and go to state 4
    BOOL            shift and go to state 10
    STRING          shift and go to state 11
    INT             shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    NOT             shift and go to state 15

    optparams                      shift and go to state 41
    params                         shift and go to state 42
    exp                            shift and go to state 43

state 18

    (41) exp -> LROUND exp . RROUND
    (49) exp -> LROUND exp . PLUS exp RROUND
    (48) exp -> exp . PLUS exp
    (50) exp -> exp . MINUS exp
    (51) exp -> exp . MULTIPLY exp
    (52) exp -> exp . DIVIDE exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (56) exp -> exp . LESSTHAN exp
    (57) exp -> exp . GREATERTHAN exp
    (58) exp -> exp . LESSEQUAL exp
    (59) exp -> exp . GREATEREQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . POW exp

    RROUND          shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    AND             shift and go to state 30
    OR              shift and go to state 31
    LESSTHAN        shift and go to state 32
    GREATERTHAN     shift and go to state 33
    LESSEQUAL       shift and go to state 34
    GREATEREQUAL    shift and go to state 35
    NOTEQUAL        shift and go to state 36
    EQUALS          shift and go to state 37
    POW             shift and go to state 38


state 19

    (25) exp -> IDENTIFIER . LSQBRAC optparams RSQBRAC
    (26) exp -> IDENTIFIER . DOT list_functions
    (43) exp -> IDENTIFIER .

    LSQBRAC         shift and go to state 24
    DOT             shift and go to state 25
    RROUND          reduce using rule 43 (exp -> IDENTIFIER .)
    PLUS            reduce using rule 43 (exp -> IDENTIFIER .)
    MINUS           reduce using rule 43 (exp -> IDENTIFIER .)
    MULTIPLY        reduce using rule 43 (exp -> IDENTIFIER .)
    DIVIDE          reduce using rule 43 (exp -> IDENTIFIER .)
    AND             reduce using rule 43 (exp -> IDENTIFIER .)
    OR              reduce using rule 43 (exp -> IDENTIFIER .)
    LESSTHAN        reduce using rule 43 (exp -> IDENTIFIER .)
    GREATERTHAN     reduce using rule 43 (exp -> IDENTIFIER .)
    LESSEQUAL       reduce using rule 43 (exp -> IDENTIFIER .)
    GREATEREQUAL    reduce using rule 43 (exp -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 43 (exp -> IDENTIFIER .)
    EQUALS          reduce using rule 43 (exp -> IDENTIFIER .)
    POW             reduce using rule 43 (exp -> IDENTIFIER .)
    LCURLY          reduce using rule 43 (exp -> IDENTIFIER .)
    DISPLAY         reduce using rule 43 (exp -> IDENTIFIER .)
    TYPE            reduce using rule 43 (exp -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 43 (exp -> IDENTIFIER .)
    IF              reduce using rule 43 (exp -> IDENTIFIER .)
    LROUND          reduce using rule 43 (exp -> IDENTIFIER .)
    BOOL            reduce using rule 43 (exp -> IDENTIFIER .)
    STRING          reduce using rule 43 (exp -> IDENTIFIER .)
    INT             reduce using rule 43 (exp -> IDENTIFIER .)
    DOUBLE          reduce using rule 43 (exp -> IDENTIFIER .)
    CHAR            reduce using rule 43 (exp -> IDENTIFIER .)
    NOT             reduce using rule 43 (exp -> IDENTIFIER .)
    ELSEIF          reduce using rule 43 (exp -> IDENTIFIER .)
    ELSE            reduce using rule 43 (exp -> IDENTIFIER .)
    SEMICOLON       reduce using rule 43 (exp -> IDENTIFIER .)
    RCURLY          reduce using rule 43 (exp -> IDENTIFIER .)
    COMMA           reduce using rule 43 (exp -> IDENTIFIER .)
    RSQBRAC         reduce using rule 43 (exp -> IDENTIFIER .)


state 20

    (6) stmt -> if elseif . else
    (11) else -> . ELSE c_stmt
    (12) else -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 47
    SEMICOLON       reduce using rule 12 (else -> .)
    ELSEIF          reduce using rule 12 (else -> .)
    RCURLY          reduce using rule 12 (else -> .)

  ! ELSE            [ reduce using rule 12 (else -> .) ]

    else                           shift and go to state 46

state 21

    (8) elseif -> ELSEIF . c_exp c_stmt elseif
    (9) c_exp -> . exp
    (25) exp -> . IDENTIFIER LSQBRAC optparams RSQBRAC
    (26) exp -> . IDENTIFIER DOT list_functions
    (41) exp -> . LROUND exp RROUND
    (42) exp -> . BOOL
    (43) exp -> . IDENTIFIER
    (44) exp -> . STRING
    (45) exp -> . INT
    (46) exp -> . DOUBLE
    (47) exp -> . CHAR
    (48) exp -> . exp PLUS exp
    (49) exp -> . LROUND exp PLUS exp RROUND
    (50) exp -> . exp MINUS exp
    (51) exp -> . exp MULTIPLY exp
    (52) exp -> . exp DIVIDE exp
    (53) exp -> . NOT exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . exp LESSTHAN exp
    (57) exp -> . exp GREATERTHAN exp
    (58) exp -> . exp LESSEQUAL exp
    (59) exp -> . exp GREATEREQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp POW exp

    IDENTIFIER      shift and go to state 19
    LROUND          shift and go to state 4
    BOOL            shift and go to state 10
    STRING          shift and go to state 11
    INT             shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    NOT             shift and go to state 15

    c_exp                          shift and go to state 48
    exp                            shift and go to state 49

state 22

    (16) stmt -> TYPE IDENTIFIER . ASSIGN LSQBRAC listparams RSQBRAC
    (38) stmt -> TYPE IDENTIFIER .
    (39) stmt -> TYPE IDENTIFIER . ASSIGN exp

    ASSIGN          shift and go to state 50
    SEMICOLON       reduce using rule 38 (stmt -> TYPE IDENTIFIER .)
    ELSE            reduce using rule 38 (stmt -> TYPE IDENTIFIER .)
    ELSEIF          reduce using rule 38 (stmt -> TYPE IDENTIFIER .)
    RCURLY          reduce using rule 38 (stmt -> TYPE IDENTIFIER .)


state 23

    (37) stmt -> IDENTIFIER ASSIGN . exp
    (25) exp -> . IDENTIFIER LSQBRAC optparams RSQBRAC
    (26) exp -> . IDENTIFIER DOT list_functions
    (41) exp -> . LROUND exp RROUND
    (42) exp -> . BOOL
    (43) exp -> . IDENTIFIER
    (44) exp -> . STRING
    (45) exp -> . INT
    (46) exp -> . DOUBLE
    (47) exp -> . CHAR
    (48) exp -> . exp PLUS exp
    (49) exp -> . LROUND exp PLUS exp RROUND
    (50) exp -> . exp MINUS exp
    (51) exp -> . exp MULTIPLY exp
    (52) exp -> . exp DIVIDE exp
    (53) exp -> . NOT exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . exp LESSTHAN exp
    (57) exp -> . exp GREATERTHAN exp
    (58) exp -> . exp LESSEQUAL exp
    (59) exp -> . exp GREATEREQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp POW exp

    IDENTIFIER      shift and go to state 19
    LROUND          shift and go to state 4
    BOOL            shift and go to state 10
    STRING          shift and go to state 11
    INT             shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    NOT             shift and go to state 15

    exp                            shift and go to state 51

state 24

    (25) exp -> IDENTIFIER LSQBRAC . optparams RSQBRAC
    (3) optparams -> . params l_comma params
    (4) optparams -> .
    (5) params -> . exp
    (25) exp -> . IDENTIFIER LSQBRAC optparams RSQBRAC
    (26) exp -> . IDENTIFIER DOT list_functions
    (41) exp -> . LROUND exp RROUND
    (42) exp -> . BOOL
    (43) exp -> . IDENTIFIER
    (44) exp -> . STRING
    (45) exp -> . INT
    (46) exp -> . DOUBLE
    (47) exp -> . CHAR
    (48) exp -> . exp PLUS exp
    (49) exp -> . LROUND exp PLUS exp RROUND
    (50) exp -> . exp MINUS exp
    (51) exp -> . exp MULTIPLY exp
    (52) exp -> . exp DIVIDE exp
    (53) exp -> . NOT exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . exp LESSTHAN exp
    (57) exp -> . exp GREATERTHAN exp
    (58) exp -> . exp LESSEQUAL exp
    (59) exp -> . exp GREATEREQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp POW exp

    RSQBRAC         reduce using rule 4 (optparams -> .)
    IDENTIFIER      shift and go to state 19
    LROUND          shift and go to state 4
    BOOL            shift and go to state 10
    STRING          shift and go to state 11
    INT             shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    NOT             shift and go to state 15

    optparams                      shift and go to state 52
    params                         shift and go to state 42
    exp                            shift and go to state 43

state 25

    (26) exp -> IDENTIFIER DOT . list_functions
    (27) list_functions -> . PUSH LROUND pparams RROUND
    (28) list_functions -> . POP LROUND pparams RROUND
    (29) list_functions -> . SLICE LROUND sliceparams RROUND
    (30) list_functions -> . INDEX LROUND indexparams RROUND

    PUSH            shift and go to state 54
    POP             shift and go to state 55
    SLICE           shift and go to state 56
    INDEX           shift and go to state 57

    list_functions                 shift and go to state 53

state 26

    (48) exp -> exp PLUS . exp
    (25) exp -> . IDENTIFIER LSQBRAC optparams RSQBRAC
    (26) exp -> . IDENTIFIER DOT list_functions
    (41) exp -> . LROUND exp RROUND
    (42) exp -> . BOOL
    (43) exp -> . IDENTIFIER
    (44) exp -> . STRING
    (45) exp -> . INT
    (46) exp -> . DOUBLE
    (47) exp -> . CHAR
    (48) exp -> . exp PLUS exp
    (49) exp -> . LROUND exp PLUS exp RROUND
    (50) exp -> . exp MINUS exp
    (51) exp -> . exp MULTIPLY exp
    (52) exp -> . exp DIVIDE exp
    (53) exp -> . NOT exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . exp LESSTHAN exp
    (57) exp -> . exp GREATERTHAN exp
    (58) exp -> . exp LESSEQUAL exp
    (59) exp -> . exp GREATEREQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp POW exp

    IDENTIFIER      shift and go to state 19
    LROUND          shift and go to state 4
    BOOL            shift and go to state 10
    STRING          shift and go to state 11
    INT             shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    NOT             shift and go to state 15

    exp                            shift and go to state 58

state 27

    (50) exp -> exp MINUS . exp
    (25) exp -> . IDENTIFIER LSQBRAC optparams RSQBRAC
    (26) exp -> . IDENTIFIER DOT list_functions
    (41) exp -> . LROUND exp RROUND
    (42) exp -> . BOOL
    (43) exp -> . IDENTIFIER
    (44) exp -> . STRING
    (45) exp -> . INT
    (46) exp -> . DOUBLE
    (47) exp -> . CHAR
    (48) exp -> . exp PLUS exp
    (49) exp -> . LROUND exp PLUS exp RROUND
    (50) exp -> . exp MINUS exp
    (51) exp -> . exp MULTIPLY exp
    (52) exp -> . exp DIVIDE exp
    (53) exp -> . NOT exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . exp LESSTHAN exp
    (57) exp -> . exp GREATERTHAN exp
    (58) exp -> . exp LESSEQUAL exp
    (59) exp -> . exp GREATEREQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp POW exp

    IDENTIFIER      shift and go to state 19
    LROUND          shift and go to state 4
    BOOL            shift and go to state 10
    STRING          shift and go to state 11
    INT             shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    NOT             shift and go to state 15

    exp                            shift and go to state 59

state 28

    (51) exp -> exp MULTIPLY . exp
    (25) exp -> . IDENTIFIER LSQBRAC optparams RSQBRAC
    (26) exp -> . IDENTIFIER DOT list_functions
    (41) exp -> . LROUND exp RROUND
    (42) exp -> . BOOL
    (43) exp -> . IDENTIFIER
    (44) exp -> . STRING
    (45) exp -> . INT
    (46) exp -> . DOUBLE
    (47) exp -> . CHAR
    (48) exp -> . exp PLUS exp
    (49) exp -> . LROUND exp PLUS exp RROUND
    (50) exp -> . exp MINUS exp
    (51) exp -> . exp MULTIPLY exp
    (52) exp -> . exp DIVIDE exp
    (53) exp -> . NOT exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . exp LESSTHAN exp
    (57) exp -> . exp GREATERTHAN exp
    (58) exp -> . exp LESSEQUAL exp
    (59) exp -> . exp GREATEREQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp POW exp

    IDENTIFIER      shift and go to state 19
    LROUND          shift and go to state 4
    BOOL            shift and go to state 10
    STRING          shift and go to state 11
    INT             shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    NOT             shift and go to state 15

    exp                            shift and go to state 60

state 29

    (52) exp -> exp DIVIDE . exp
    (25) exp -> . IDENTIFIER LSQBRAC optparams RSQBRAC
    (26) exp -> . IDENTIFIER DOT list_functions
    (41) exp -> . LROUND exp RROUND
    (42) exp -> . BOOL
    (43) exp -> . IDENTIFIER
    (44) exp -> . STRING
    (45) exp -> . INT
    (46) exp -> . DOUBLE
    (47) exp -> . CHAR
    (48) exp -> . exp PLUS exp
    (49) exp -> . LROUND exp PLUS exp RROUND
    (50) exp -> . exp MINUS exp
    (51) exp -> . exp MULTIPLY exp
    (52) exp -> . exp DIVIDE exp
    (53) exp -> . NOT exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . exp LESSTHAN exp
    (57) exp -> . exp GREATERTHAN exp
    (58) exp -> . exp LESSEQUAL exp
    (59) exp -> . exp GREATEREQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp POW exp

    IDENTIFIER      shift and go to state 19
    LROUND          shift and go to state 4
    BOOL            shift and go to state 10
    STRING          shift and go to state 11
    INT             shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    NOT             shift and go to state 15

    exp                            shift and go to state 61

state 30

    (54) exp -> exp AND . exp
    (25) exp -> . IDENTIFIER LSQBRAC optparams RSQBRAC
    (26) exp -> . IDENTIFIER DOT list_functions
    (41) exp -> . LROUND exp RROUND
    (42) exp -> . BOOL
    (43) exp -> . IDENTIFIER
    (44) exp -> . STRING
    (45) exp -> . INT
    (46) exp -> . DOUBLE
    (47) exp -> . CHAR
    (48) exp -> . exp PLUS exp
    (49) exp -> . LROUND exp PLUS exp RROUND
    (50) exp -> . exp MINUS exp
    (51) exp -> . exp MULTIPLY exp
    (52) exp -> . exp DIVIDE exp
    (53) exp -> . NOT exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . exp LESSTHAN exp
    (57) exp -> . exp GREATERTHAN exp
    (58) exp -> . exp LESSEQUAL exp
    (59) exp -> . exp GREATEREQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp POW exp

    IDENTIFIER      shift and go to state 19
    LROUND          shift and go to state 4
    BOOL            shift and go to state 10
    STRING          shift and go to state 11
    INT             shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    NOT             shift and go to state 15

    exp                            shift and go to state 62

state 31

    (55) exp -> exp OR . exp
    (25) exp -> . IDENTIFIER LSQBRAC optparams RSQBRAC
    (26) exp -> . IDENTIFIER DOT list_functions
    (41) exp -> . LROUND exp RROUND
    (42) exp -> . BOOL
    (43) exp -> . IDENTIFIER
    (44) exp -> . STRING
    (45) exp -> . INT
    (46) exp -> . DOUBLE
    (47) exp -> . CHAR
    (48) exp -> . exp PLUS exp
    (49) exp -> . LROUND exp PLUS exp RROUND
    (50) exp -> . exp MINUS exp
    (51) exp -> . exp MULTIPLY exp
    (52) exp -> . exp DIVIDE exp
    (53) exp -> . NOT exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . exp LESSTHAN exp
    (57) exp -> . exp GREATERTHAN exp
    (58) exp -> . exp LESSEQUAL exp
    (59) exp -> . exp GREATEREQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp POW exp

    IDENTIFIER      shift and go to state 19
    LROUND          shift and go to state 4
    BOOL            shift and go to state 10
    STRING          shift and go to state 11
    INT             shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    NOT             shift and go to state 15

    exp                            shift and go to state 63

state 32

    (56) exp -> exp LESSTHAN . exp
    (25) exp -> . IDENTIFIER LSQBRAC optparams RSQBRAC
    (26) exp -> . IDENTIFIER DOT list_functions
    (41) exp -> . LROUND exp RROUND
    (42) exp -> . BOOL
    (43) exp -> . IDENTIFIER
    (44) exp -> . STRING
    (45) exp -> . INT
    (46) exp -> . DOUBLE
    (47) exp -> . CHAR
    (48) exp -> . exp PLUS exp
    (49) exp -> . LROUND exp PLUS exp RROUND
    (50) exp -> . exp MINUS exp
    (51) exp -> . exp MULTIPLY exp
    (52) exp -> . exp DIVIDE exp
    (53) exp -> . NOT exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . exp LESSTHAN exp
    (57) exp -> . exp GREATERTHAN exp
    (58) exp -> . exp LESSEQUAL exp
    (59) exp -> . exp GREATEREQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp POW exp

    IDENTIFIER      shift and go to state 19
    LROUND          shift and go to state 4
    BOOL            shift and go to state 10
    STRING          shift and go to state 11
    INT             shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    NOT             shift and go to state 15

    exp                            shift and go to state 64

state 33

    (57) exp -> exp GREATERTHAN . exp
    (25) exp -> . IDENTIFIER LSQBRAC optparams RSQBRAC
    (26) exp -> . IDENTIFIER DOT list_functions
    (41) exp -> . LROUND exp RROUND
    (42) exp -> . BOOL
    (43) exp -> . IDENTIFIER
    (44) exp -> . STRING
    (45) exp -> . INT
    (46) exp -> . DOUBLE
    (47) exp -> . CHAR
    (48) exp -> . exp PLUS exp
    (49) exp -> . LROUND exp PLUS exp RROUND
    (50) exp -> . exp MINUS exp
    (51) exp -> . exp MULTIPLY exp
    (52) exp -> . exp DIVIDE exp
    (53) exp -> . NOT exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . exp LESSTHAN exp
    (57) exp -> . exp GREATERTHAN exp
    (58) exp -> . exp LESSEQUAL exp
    (59) exp -> . exp GREATEREQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp POW exp

    IDENTIFIER      shift and go to state 19
    LROUND          shift and go to state 4
    BOOL            shift and go to state 10
    STRING          shift and go to state 11
    INT             shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    NOT             shift and go to state 15

    exp                            shift and go to state 65

state 34

    (58) exp -> exp LESSEQUAL . exp
    (25) exp -> . IDENTIFIER LSQBRAC optparams RSQBRAC
    (26) exp -> . IDENTIFIER DOT list_functions
    (41) exp -> . LROUND exp RROUND
    (42) exp -> . BOOL
    (43) exp -> . IDENTIFIER
    (44) exp -> . STRING
    (45) exp -> . INT
    (46) exp -> . DOUBLE
    (47) exp -> . CHAR
    (48) exp -> . exp PLUS exp
    (49) exp -> . LROUND exp PLUS exp RROUND
    (50) exp -> . exp MINUS exp
    (51) exp -> . exp MULTIPLY exp
    (52) exp -> . exp DIVIDE exp
    (53) exp -> . NOT exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . exp LESSTHAN exp
    (57) exp -> . exp GREATERTHAN exp
    (58) exp -> . exp LESSEQUAL exp
    (59) exp -> . exp GREATEREQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp POW exp

    IDENTIFIER      shift and go to state 19
    LROUND          shift and go to state 4
    BOOL            shift and go to state 10
    STRING          shift and go to state 11
    INT             shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    NOT             shift and go to state 15

    exp                            shift and go to state 66

state 35

    (59) exp -> exp GREATEREQUAL . exp
    (25) exp -> . IDENTIFIER LSQBRAC optparams RSQBRAC
    (26) exp -> . IDENTIFIER DOT list_functions
    (41) exp -> . LROUND exp RROUND
    (42) exp -> . BOOL
    (43) exp -> . IDENTIFIER
    (44) exp -> . STRING
    (45) exp -> . INT
    (46) exp -> . DOUBLE
    (47) exp -> . CHAR
    (48) exp -> . exp PLUS exp
    (49) exp -> . LROUND exp PLUS exp RROUND
    (50) exp -> . exp MINUS exp
    (51) exp -> . exp MULTIPLY exp
    (52) exp -> . exp DIVIDE exp
    (53) exp -> . NOT exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . exp LESSTHAN exp
    (57) exp -> . exp GREATERTHAN exp
    (58) exp -> . exp LESSEQUAL exp
    (59) exp -> . exp GREATEREQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp POW exp

    IDENTIFIER      shift and go to state 19
    LROUND          shift and go to state 4
    BOOL            shift and go to state 10
    STRING          shift and go to state 11
    INT             shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    NOT             shift and go to state 15

    exp                            shift and go to state 67

state 36

    (60) exp -> exp NOTEQUAL . exp
    (25) exp -> . IDENTIFIER LSQBRAC optparams RSQBRAC
    (26) exp -> . IDENTIFIER DOT list_functions
    (41) exp -> . LROUND exp RROUND
    (42) exp -> . BOOL
    (43) exp -> . IDENTIFIER
    (44) exp -> . STRING
    (45) exp -> . INT
    (46) exp -> . DOUBLE
    (47) exp -> . CHAR
    (48) exp -> . exp PLUS exp
    (49) exp -> . LROUND exp PLUS exp RROUND
    (50) exp -> . exp MINUS exp
    (51) exp -> . exp MULTIPLY exp
    (52) exp -> . exp DIVIDE exp
    (53) exp -> . NOT exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . exp LESSTHAN exp
    (57) exp -> . exp GREATERTHAN exp
    (58) exp -> . exp LESSEQUAL exp
    (59) exp -> . exp GREATEREQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp POW exp

    IDENTIFIER      shift and go to state 19
    LROUND          shift and go to state 4
    BOOL            shift and go to state 10
    STRING          shift and go to state 11
    INT             shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    NOT             shift and go to state 15

    exp                            shift and go to state 68

state 37

    (61) exp -> exp EQUALS . exp
    (25) exp -> . IDENTIFIER LSQBRAC optparams RSQBRAC
    (26) exp -> . IDENTIFIER DOT list_functions
    (41) exp -> . LROUND exp RROUND
    (42) exp -> . BOOL
    (43) exp -> . IDENTIFIER
    (44) exp -> . STRING
    (45) exp -> . INT
    (46) exp -> . DOUBLE
    (47) exp -> . CHAR
    (48) exp -> . exp PLUS exp
    (49) exp -> . LROUND exp PLUS exp RROUND
    (50) exp -> . exp MINUS exp
    (51) exp -> . exp MULTIPLY exp
    (52) exp -> . exp DIVIDE exp
    (53) exp -> . NOT exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . exp LESSTHAN exp
    (57) exp -> . exp GREATERTHAN exp
    (58) exp -> . exp LESSEQUAL exp
    (59) exp -> . exp GREATEREQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp POW exp

    IDENTIFIER      shift and go to state 19
    LROUND          shift and go to state 4
    BOOL            shift and go to state 10
    STRING          shift and go to state 11
    INT             shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    NOT             shift and go to state 15

    exp                            shift and go to state 69

state 38

    (62) exp -> exp POW . exp
    (25) exp -> . IDENTIFIER LSQBRAC optparams RSQBRAC
    (26) exp -> . IDENTIFIER DOT list_functions
    (41) exp -> . LROUND exp RROUND
    (42) exp -> . BOOL
    (43) exp -> . IDENTIFIER
    (44) exp -> . STRING
    (45) exp -> . INT
    (46) exp -> . DOUBLE
    (47) exp -> . CHAR
    (48) exp -> . exp PLUS exp
    (49) exp -> . LROUND exp PLUS exp RROUND
    (50) exp -> . exp MINUS exp
    (51) exp -> . exp MULTIPLY exp
    (52) exp -> . exp DIVIDE exp
    (53) exp -> . NOT exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . exp LESSTHAN exp
    (57) exp -> . exp GREATERTHAN exp
    (58) exp -> . exp LESSEQUAL exp
    (59) exp -> . exp GREATEREQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp POW exp

    IDENTIFIER      shift and go to state 19
    LROUND          shift and go to state 4
    BOOL            shift and go to state 10
    STRING          shift and go to state 11
    INT             shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    NOT             shift and go to state 15

    exp                            shift and go to state 70

state 39

    (7) if -> IF exp . c_stmt
    (48) exp -> exp . PLUS exp
    (50) exp -> exp . MINUS exp
    (51) exp -> exp . MULTIPLY exp
    (52) exp -> exp . DIVIDE exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (56) exp -> exp . LESSTHAN exp
    (57) exp -> exp . GREATERTHAN exp
    (58) exp -> exp . LESSEQUAL exp
    (59) exp -> exp . GREATEREQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . POW exp
    (13) c_stmt -> . LCURLY c_stmt RCURLY
    (14) c_stmt -> . stmt
    (15) c_stmt -> .
    (2) stmt -> . DISPLAY LROUND optparams RROUND
    (6) stmt -> . if elseif else
    (16) stmt -> . TYPE IDENTIFIER ASSIGN LSQBRAC listparams RSQBRAC
    (37) stmt -> . IDENTIFIER ASSIGN exp
    (38) stmt -> . TYPE IDENTIFIER
    (39) stmt -> . TYPE IDENTIFIER ASSIGN exp
    (40) stmt -> . exp
    (7) if -> . IF exp c_stmt
    (25) exp -> . IDENTIFIER LSQBRAC optparams RSQBRAC
    (26) exp -> . IDENTIFIER DOT list_functions
    (41) exp -> . LROUND exp RROUND
    (42) exp -> . BOOL
    (43) exp -> . IDENTIFIER
    (44) exp -> . STRING
    (45) exp -> . INT
    (46) exp -> . DOUBLE
    (47) exp -> . CHAR
    (48) exp -> . exp PLUS exp
    (49) exp -> . LROUND exp PLUS exp RROUND
    (50) exp -> . exp MINUS exp
    (51) exp -> . exp MULTIPLY exp
    (52) exp -> . exp DIVIDE exp
    (53) exp -> . NOT exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . exp LESSTHAN exp
    (57) exp -> . exp GREATERTHAN exp
    (58) exp -> . exp LESSEQUAL exp
    (59) exp -> . exp GREATEREQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp POW exp

    PLUS            shift and go to state 26
    MINUS           shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    AND             shift and go to state 30
    OR              shift and go to state 31
    LESSTHAN        shift and go to state 32
    GREATERTHAN     shift and go to state 33
    LESSEQUAL       shift and go to state 34
    GREATEREQUAL    shift and go to state 35
    NOTEQUAL        shift and go to state 36
    EQUALS          shift and go to state 37
    POW             shift and go to state 38
    LCURLY          shift and go to state 72
    ELSE            reduce using rule 15 (c_stmt -> .)
    SEMICOLON       reduce using rule 15 (c_stmt -> .)
    ELSEIF          reduce using rule 15 (c_stmt -> .)
    RCURLY          reduce using rule 15 (c_stmt -> .)
    DISPLAY         shift and go to state 3
    TYPE            shift and go to state 6
    IDENTIFIER      shift and go to state 7
    IF              shift and go to state 9
    LROUND          shift and go to state 4
    BOOL            shift and go to state 10
    STRING          shift and go to state 11
    INT             shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    NOT             shift and go to state 15

    exp                            shift and go to state 8
    c_stmt                         shift and go to state 71
    stmt                           shift and go to state 73
    if                             shift and go to state 5

state 40

    (53) exp -> NOT exp .
    (48) exp -> exp . PLUS exp
    (50) exp -> exp . MINUS exp
    (51) exp -> exp . MULTIPLY exp
    (52) exp -> exp . DIVIDE exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (56) exp -> exp . LESSTHAN exp
    (57) exp -> exp . GREATERTHAN exp
    (58) exp -> exp . LESSEQUAL exp
    (59) exp -> exp . GREATEREQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . POW exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for GREATEREQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    SEMICOLON       reduce using rule 53 (exp -> NOT exp .)
    RROUND          reduce using rule 53 (exp -> NOT exp .)
    LCURLY          reduce using rule 53 (exp -> NOT exp .)
    DISPLAY         reduce using rule 53 (exp -> NOT exp .)
    TYPE            reduce using rule 53 (exp -> NOT exp .)
    IDENTIFIER      reduce using rule 53 (exp -> NOT exp .)
    IF              reduce using rule 53 (exp -> NOT exp .)
    LROUND          reduce using rule 53 (exp -> NOT exp .)
    BOOL            reduce using rule 53 (exp -> NOT exp .)
    STRING          reduce using rule 53 (exp -> NOT exp .)
    INT             reduce using rule 53 (exp -> NOT exp .)
    DOUBLE          reduce using rule 53 (exp -> NOT exp .)
    CHAR            reduce using rule 53 (exp -> NOT exp .)
    NOT             reduce using rule 53 (exp -> NOT exp .)
    ELSEIF          reduce using rule 53 (exp -> NOT exp .)
    ELSE            reduce using rule 53 (exp -> NOT exp .)
    RCURLY          reduce using rule 53 (exp -> NOT exp .)
    COMMA           reduce using rule 53 (exp -> NOT exp .)
    RSQBRAC         reduce using rule 53 (exp -> NOT exp .)
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    AND             shift and go to state 30
    OR              shift and go to state 31
    LESSTHAN        shift and go to state 32
    GREATERTHAN     shift and go to state 33
    LESSEQUAL       shift and go to state 34
    GREATEREQUAL    shift and go to state 35
    NOTEQUAL        shift and go to state 36
    EQUALS          shift and go to state 37
    POW             shift and go to state 38

  ! PLUS            [ reduce using rule 53 (exp -> NOT exp .) ]
  ! MINUS           [ reduce using rule 53 (exp -> NOT exp .) ]
  ! MULTIPLY        [ reduce using rule 53 (exp -> NOT exp .) ]
  ! DIVIDE          [ reduce using rule 53 (exp -> NOT exp .) ]
  ! AND             [ reduce using rule 53 (exp -> NOT exp .) ]
  ! OR              [ reduce using rule 53 (exp -> NOT exp .) ]
  ! LESSTHAN        [ reduce using rule 53 (exp -> NOT exp .) ]
  ! GREATERTHAN     [ reduce using rule 53 (exp -> NOT exp .) ]
  ! LESSEQUAL       [ reduce using rule 53 (exp -> NOT exp .) ]
  ! GREATEREQUAL    [ reduce using rule 53 (exp -> NOT exp .) ]
  ! NOTEQUAL        [ reduce using rule 53 (exp -> NOT exp .) ]
  ! EQUALS          [ reduce using rule 53 (exp -> NOT exp .) ]
  ! POW             [ reduce using rule 53 (exp -> NOT exp .) ]


state 41

    (2) stmt -> DISPLAY LROUND optparams . RROUND

    RROUND          shift and go to state 74


state 42

    (3) optparams -> params . l_comma params
    (17) l_comma -> . COMMA
    (18) l_comma -> .

    COMMA           shift and go to state 76
    IDENTIFIER      reduce using rule 18 (l_comma -> .)
    LROUND          reduce using rule 18 (l_comma -> .)
    BOOL            reduce using rule 18 (l_comma -> .)
    STRING          reduce using rule 18 (l_comma -> .)
    INT             reduce using rule 18 (l_comma -> .)
    DOUBLE          reduce using rule 18 (l_comma -> .)
    CHAR            reduce using rule 18 (l_comma -> .)
    NOT             reduce using rule 18 (l_comma -> .)

    l_comma                        shift and go to state 75

state 43

    (5) params -> exp .
    (48) exp -> exp . PLUS exp
    (50) exp -> exp . MINUS exp
    (51) exp -> exp . MULTIPLY exp
    (52) exp -> exp . DIVIDE exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (56) exp -> exp . LESSTHAN exp
    (57) exp -> exp . GREATERTHAN exp
    (58) exp -> exp . LESSEQUAL exp
    (59) exp -> exp . GREATEREQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . POW exp

    COMMA           reduce using rule 5 (params -> exp .)
    IDENTIFIER      reduce using rule 5 (params -> exp .)
    LROUND          reduce using rule 5 (params -> exp .)
    BOOL            reduce using rule 5 (params -> exp .)
    STRING          reduce using rule 5 (params -> exp .)
    INT             reduce using rule 5 (params -> exp .)
    DOUBLE          reduce using rule 5 (params -> exp .)
    CHAR            reduce using rule 5 (params -> exp .)
    NOT             reduce using rule 5 (params -> exp .)
    RROUND          reduce using rule 5 (params -> exp .)
    RSQBRAC         reduce using rule 5 (params -> exp .)
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    AND             shift and go to state 30
    OR              shift and go to state 31
    LESSTHAN        shift and go to state 32
    GREATERTHAN     shift and go to state 33
    LESSEQUAL       shift and go to state 34
    GREATEREQUAL    shift and go to state 35
    NOTEQUAL        shift and go to state 36
    EQUALS          shift and go to state 37
    POW             shift and go to state 38


state 44

    (41) exp -> LROUND exp RROUND .

    PLUS            reduce using rule 41 (exp -> LROUND exp RROUND .)
    MINUS           reduce using rule 41 (exp -> LROUND exp RROUND .)
    MULTIPLY        reduce using rule 41 (exp -> LROUND exp RROUND .)
    DIVIDE          reduce using rule 41 (exp -> LROUND exp RROUND .)
    AND             reduce using rule 41 (exp -> LROUND exp RROUND .)
    OR              reduce using rule 41 (exp -> LROUND exp RROUND .)
    LESSTHAN        reduce using rule 41 (exp -> LROUND exp RROUND .)
    GREATERTHAN     reduce using rule 41 (exp -> LROUND exp RROUND .)
    LESSEQUAL       reduce using rule 41 (exp -> LROUND exp RROUND .)
    GREATEREQUAL    reduce using rule 41 (exp -> LROUND exp RROUND .)
    NOTEQUAL        reduce using rule 41 (exp -> LROUND exp RROUND .)
    EQUALS          reduce using rule 41 (exp -> LROUND exp RROUND .)
    POW             reduce using rule 41 (exp -> LROUND exp RROUND .)
    SEMICOLON       reduce using rule 41 (exp -> LROUND exp RROUND .)
    RROUND          reduce using rule 41 (exp -> LROUND exp RROUND .)
    LCURLY          reduce using rule 41 (exp -> LROUND exp RROUND .)
    DISPLAY         reduce using rule 41 (exp -> LROUND exp RROUND .)
    TYPE            reduce using rule 41 (exp -> LROUND exp RROUND .)
    IDENTIFIER      reduce using rule 41 (exp -> LROUND exp RROUND .)
    IF              reduce using rule 41 (exp -> LROUND exp RROUND .)
    LROUND          reduce using rule 41 (exp -> LROUND exp RROUND .)
    BOOL            reduce using rule 41 (exp -> LROUND exp RROUND .)
    STRING          reduce using rule 41 (exp -> LROUND exp RROUND .)
    INT             reduce using rule 41 (exp -> LROUND exp RROUND .)
    DOUBLE          reduce using rule 41 (exp -> LROUND exp RROUND .)
    CHAR            reduce using rule 41 (exp -> LROUND exp RROUND .)
    NOT             reduce using rule 41 (exp -> LROUND exp RROUND .)
    ELSEIF          reduce using rule 41 (exp -> LROUND exp RROUND .)
    ELSE            reduce using rule 41 (exp -> LROUND exp RROUND .)
    RCURLY          reduce using rule 41 (exp -> LROUND exp RROUND .)
    COMMA           reduce using rule 41 (exp -> LROUND exp RROUND .)
    RSQBRAC         reduce using rule 41 (exp -> LROUND exp RROUND .)


state 45

    (49) exp -> LROUND exp PLUS . exp RROUND
    (48) exp -> exp PLUS . exp
    (25) exp -> . IDENTIFIER LSQBRAC optparams RSQBRAC
    (26) exp -> . IDENTIFIER DOT list_functions
    (41) exp -> . LROUND exp RROUND
    (42) exp -> . BOOL
    (43) exp -> . IDENTIFIER
    (44) exp -> . STRING
    (45) exp -> . INT
    (46) exp -> . DOUBLE
    (47) exp -> . CHAR
    (48) exp -> . exp PLUS exp
    (49) exp -> . LROUND exp PLUS exp RROUND
    (50) exp -> . exp MINUS exp
    (51) exp -> . exp MULTIPLY exp
    (52) exp -> . exp DIVIDE exp
    (53) exp -> . NOT exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . exp LESSTHAN exp
    (57) exp -> . exp GREATERTHAN exp
    (58) exp -> . exp LESSEQUAL exp
    (59) exp -> . exp GREATEREQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp POW exp

    IDENTIFIER      shift and go to state 19
    LROUND          shift and go to state 4
    BOOL            shift and go to state 10
    STRING          shift and go to state 11
    INT             shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    NOT             shift and go to state 15

    exp                            shift and go to state 77

state 46

    (6) stmt -> if elseif else .

    SEMICOLON       reduce using rule 6 (stmt -> if elseif else .)
    ELSE            reduce using rule 6 (stmt -> if elseif else .)
    ELSEIF          reduce using rule 6 (stmt -> if elseif else .)
    RCURLY          reduce using rule 6 (stmt -> if elseif else .)


state 47

    (11) else -> ELSE . c_stmt
    (13) c_stmt -> . LCURLY c_stmt RCURLY
    (14) c_stmt -> . stmt
    (15) c_stmt -> .
    (2) stmt -> . DISPLAY LROUND optparams RROUND
    (6) stmt -> . if elseif else
    (16) stmt -> . TYPE IDENTIFIER ASSIGN LSQBRAC listparams RSQBRAC
    (37) stmt -> . IDENTIFIER ASSIGN exp
    (38) stmt -> . TYPE IDENTIFIER
    (39) stmt -> . TYPE IDENTIFIER ASSIGN exp
    (40) stmt -> . exp
    (7) if -> . IF exp c_stmt
    (25) exp -> . IDENTIFIER LSQBRAC optparams RSQBRAC
    (26) exp -> . IDENTIFIER DOT list_functions
    (41) exp -> . LROUND exp RROUND
    (42) exp -> . BOOL
    (43) exp -> . IDENTIFIER
    (44) exp -> . STRING
    (45) exp -> . INT
    (46) exp -> . DOUBLE
    (47) exp -> . CHAR
    (48) exp -> . exp PLUS exp
    (49) exp -> . LROUND exp PLUS exp RROUND
    (50) exp -> . exp MINUS exp
    (51) exp -> . exp MULTIPLY exp
    (52) exp -> . exp DIVIDE exp
    (53) exp -> . NOT exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . exp LESSTHAN exp
    (57) exp -> . exp GREATERTHAN exp
    (58) exp -> . exp LESSEQUAL exp
    (59) exp -> . exp GREATEREQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp POW exp

    LCURLY          shift and go to state 72
    ELSE            reduce using rule 15 (c_stmt -> .)
    SEMICOLON       reduce using rule 15 (c_stmt -> .)
    ELSEIF          reduce using rule 15 (c_stmt -> .)
    RCURLY          reduce using rule 15 (c_stmt -> .)
    DISPLAY         shift and go to state 3
    TYPE            shift and go to state 6
    IDENTIFIER      shift and go to state 7
    IF              shift and go to state 9
    LROUND          shift and go to state 4
    BOOL            shift and go to state 10
    STRING          shift and go to state 11
    INT             shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    NOT             shift and go to state 15

    c_stmt                         shift and go to state 78
    stmt                           shift and go to state 73
    if                             shift and go to state 5
    exp                            shift and go to state 8

state 48

    (8) elseif -> ELSEIF c_exp . c_stmt elseif
    (13) c_stmt -> . LCURLY c_stmt RCURLY
    (14) c_stmt -> . stmt
    (15) c_stmt -> .
    (2) stmt -> . DISPLAY LROUND optparams RROUND
    (6) stmt -> . if elseif else
    (16) stmt -> . TYPE IDENTIFIER ASSIGN LSQBRAC listparams RSQBRAC
    (37) stmt -> . IDENTIFIER ASSIGN exp
    (38) stmt -> . TYPE IDENTIFIER
    (39) stmt -> . TYPE IDENTIFIER ASSIGN exp
    (40) stmt -> . exp
    (7) if -> . IF exp c_stmt
    (25) exp -> . IDENTIFIER LSQBRAC optparams RSQBRAC
    (26) exp -> . IDENTIFIER DOT list_functions
    (41) exp -> . LROUND exp RROUND
    (42) exp -> . BOOL
    (43) exp -> . IDENTIFIER
    (44) exp -> . STRING
    (45) exp -> . INT
    (46) exp -> . DOUBLE
    (47) exp -> . CHAR
    (48) exp -> . exp PLUS exp
    (49) exp -> . LROUND exp PLUS exp RROUND
    (50) exp -> . exp MINUS exp
    (51) exp -> . exp MULTIPLY exp
    (52) exp -> . exp DIVIDE exp
    (53) exp -> . NOT exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . exp LESSTHAN exp
    (57) exp -> . exp GREATERTHAN exp
    (58) exp -> . exp LESSEQUAL exp
    (59) exp -> . exp GREATEREQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp POW exp

    LCURLY          shift and go to state 72
    ELSE            reduce using rule 15 (c_stmt -> .)
    SEMICOLON       reduce using rule 15 (c_stmt -> .)
    ELSEIF          reduce using rule 15 (c_stmt -> .)
    RCURLY          reduce using rule 15 (c_stmt -> .)
    DISPLAY         shift and go to state 3
    TYPE            shift and go to state 6
    IDENTIFIER      shift and go to state 7
    IF              shift and go to state 9
    LROUND          shift and go to state 4
    BOOL            shift and go to state 10
    STRING          shift and go to state 11
    INT             shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    NOT             shift and go to state 15

    c_stmt                         shift and go to state 79
    stmt                           shift and go to state 73
    if                             shift and go to state 5
    exp                            shift and go to state 8

state 49

    (9) c_exp -> exp .
    (48) exp -> exp . PLUS exp
    (50) exp -> exp . MINUS exp
    (51) exp -> exp . MULTIPLY exp
    (52) exp -> exp . DIVIDE exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (56) exp -> exp . LESSTHAN exp
    (57) exp -> exp . GREATERTHAN exp
    (58) exp -> exp . LESSEQUAL exp
    (59) exp -> exp . GREATEREQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . POW exp

    LCURLY          reduce using rule 9 (c_exp -> exp .)
    DISPLAY         reduce using rule 9 (c_exp -> exp .)
    TYPE            reduce using rule 9 (c_exp -> exp .)
    IDENTIFIER      reduce using rule 9 (c_exp -> exp .)
    IF              reduce using rule 9 (c_exp -> exp .)
    LROUND          reduce using rule 9 (c_exp -> exp .)
    BOOL            reduce using rule 9 (c_exp -> exp .)
    STRING          reduce using rule 9 (c_exp -> exp .)
    INT             reduce using rule 9 (c_exp -> exp .)
    DOUBLE          reduce using rule 9 (c_exp -> exp .)
    CHAR            reduce using rule 9 (c_exp -> exp .)
    NOT             reduce using rule 9 (c_exp -> exp .)
    ELSEIF          reduce using rule 9 (c_exp -> exp .)
    ELSE            reduce using rule 9 (c_exp -> exp .)
    SEMICOLON       reduce using rule 9 (c_exp -> exp .)
    RCURLY          reduce using rule 9 (c_exp -> exp .)
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    AND             shift and go to state 30
    OR              shift and go to state 31
    LESSTHAN        shift and go to state 32
    GREATERTHAN     shift and go to state 33
    LESSEQUAL       shift and go to state 34
    GREATEREQUAL    shift and go to state 35
    NOTEQUAL        shift and go to state 36
    EQUALS          shift and go to state 37
    POW             shift and go to state 38


state 50

    (16) stmt -> TYPE IDENTIFIER ASSIGN . LSQBRAC listparams RSQBRAC
    (39) stmt -> TYPE IDENTIFIER ASSIGN . exp
    (25) exp -> . IDENTIFIER LSQBRAC optparams RSQBRAC
    (26) exp -> . IDENTIFIER DOT list_functions
    (41) exp -> . LROUND exp RROUND
    (42) exp -> . BOOL
    (43) exp -> . IDENTIFIER
    (44) exp -> . STRING
    (45) exp -> . INT
    (46) exp -> . DOUBLE
    (47) exp -> . CHAR
    (48) exp -> . exp PLUS exp
    (49) exp -> . LROUND exp PLUS exp RROUND
    (50) exp -> . exp MINUS exp
    (51) exp -> . exp MULTIPLY exp
    (52) exp -> . exp DIVIDE exp
    (53) exp -> . NOT exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . exp LESSTHAN exp
    (57) exp -> . exp GREATERTHAN exp
    (58) exp -> . exp LESSEQUAL exp
    (59) exp -> . exp GREATEREQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp POW exp

    LSQBRAC         shift and go to state 80
    IDENTIFIER      shift and go to state 19
    LROUND          shift and go to state 4
    BOOL            shift and go to state 10
    STRING          shift and go to state 11
    INT             shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    NOT             shift and go to state 15

    exp                            shift and go to state 81

state 51

    (37) stmt -> IDENTIFIER ASSIGN exp .
    (48) exp -> exp . PLUS exp
    (50) exp -> exp . MINUS exp
    (51) exp -> exp . MULTIPLY exp
    (52) exp -> exp . DIVIDE exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (56) exp -> exp . LESSTHAN exp
    (57) exp -> exp . GREATERTHAN exp
    (58) exp -> exp . LESSEQUAL exp
    (59) exp -> exp . GREATEREQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . POW exp

    SEMICOLON       reduce using rule 37 (stmt -> IDENTIFIER ASSIGN exp .)
    ELSE            reduce using rule 37 (stmt -> IDENTIFIER ASSIGN exp .)
    ELSEIF          reduce using rule 37 (stmt -> IDENTIFIER ASSIGN exp .)
    RCURLY          reduce using rule 37 (stmt -> IDENTIFIER ASSIGN exp .)
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    AND             shift and go to state 30
    OR              shift and go to state 31
    LESSTHAN        shift and go to state 32
    GREATERTHAN     shift and go to state 33
    LESSEQUAL       shift and go to state 34
    GREATEREQUAL    shift and go to state 35
    NOTEQUAL        shift and go to state 36
    EQUALS          shift and go to state 37
    POW             shift and go to state 38


state 52

    (25) exp -> IDENTIFIER LSQBRAC optparams . RSQBRAC

    RSQBRAC         shift and go to state 82


state 53

    (26) exp -> IDENTIFIER DOT list_functions .

    PLUS            reduce using rule 26 (exp -> IDENTIFIER DOT list_functions .)
    MINUS           reduce using rule 26 (exp -> IDENTIFIER DOT list_functions .)
    MULTIPLY        reduce using rule 26 (exp -> IDENTIFIER DOT list_functions .)
    DIVIDE          reduce using rule 26 (exp -> IDENTIFIER DOT list_functions .)
    AND             reduce using rule 26 (exp -> IDENTIFIER DOT list_functions .)
    OR              reduce using rule 26 (exp -> IDENTIFIER DOT list_functions .)
    LESSTHAN        reduce using rule 26 (exp -> IDENTIFIER DOT list_functions .)
    GREATERTHAN     reduce using rule 26 (exp -> IDENTIFIER DOT list_functions .)
    LESSEQUAL       reduce using rule 26 (exp -> IDENTIFIER DOT list_functions .)
    GREATEREQUAL    reduce using rule 26 (exp -> IDENTIFIER DOT list_functions .)
    NOTEQUAL        reduce using rule 26 (exp -> IDENTIFIER DOT list_functions .)
    EQUALS          reduce using rule 26 (exp -> IDENTIFIER DOT list_functions .)
    POW             reduce using rule 26 (exp -> IDENTIFIER DOT list_functions .)
    SEMICOLON       reduce using rule 26 (exp -> IDENTIFIER DOT list_functions .)
    RROUND          reduce using rule 26 (exp -> IDENTIFIER DOT list_functions .)
    LCURLY          reduce using rule 26 (exp -> IDENTIFIER DOT list_functions .)
    DISPLAY         reduce using rule 26 (exp -> IDENTIFIER DOT list_functions .)
    TYPE            reduce using rule 26 (exp -> IDENTIFIER DOT list_functions .)
    IDENTIFIER      reduce using rule 26 (exp -> IDENTIFIER DOT list_functions .)
    IF              reduce using rule 26 (exp -> IDENTIFIER DOT list_functions .)
    LROUND          reduce using rule 26 (exp -> IDENTIFIER DOT list_functions .)
    BOOL            reduce using rule 26 (exp -> IDENTIFIER DOT list_functions .)
    STRING          reduce using rule 26 (exp -> IDENTIFIER DOT list_functions .)
    INT             reduce using rule 26 (exp -> IDENTIFIER DOT list_functions .)
    DOUBLE          reduce using rule 26 (exp -> IDENTIFIER DOT list_functions .)
    CHAR            reduce using rule 26 (exp -> IDENTIFIER DOT list_functions .)
    NOT             reduce using rule 26 (exp -> IDENTIFIER DOT list_functions .)
    ELSEIF          reduce using rule 26 (exp -> IDENTIFIER DOT list_functions .)
    ELSE            reduce using rule 26 (exp -> IDENTIFIER DOT list_functions .)
    RCURLY          reduce using rule 26 (exp -> IDENTIFIER DOT list_functions .)
    COMMA           reduce using rule 26 (exp -> IDENTIFIER DOT list_functions .)
    RSQBRAC         reduce using rule 26 (exp -> IDENTIFIER DOT list_functions .)


state 54

    (27) list_functions -> PUSH . LROUND pparams RROUND

    LROUND          shift and go to state 83


state 55

    (28) list_functions -> POP . LROUND pparams RROUND

    LROUND          shift and go to state 84


state 56

    (29) list_functions -> SLICE . LROUND sliceparams RROUND

    LROUND          shift and go to state 85


state 57

    (30) list_functions -> INDEX . LROUND indexparams RROUND

    LROUND          shift and go to state 86


state 58

    (48) exp -> exp PLUS exp .
    (48) exp -> exp . PLUS exp
    (50) exp -> exp . MINUS exp
    (51) exp -> exp . MULTIPLY exp
    (52) exp -> exp . DIVIDE exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (56) exp -> exp . LESSTHAN exp
    (57) exp -> exp . GREATERTHAN exp
    (58) exp -> exp . LESSEQUAL exp
    (59) exp -> exp . GREATEREQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . POW exp

    PLUS            reduce using rule 48 (exp -> exp PLUS exp .)
    MINUS           reduce using rule 48 (exp -> exp PLUS exp .)
    AND             reduce using rule 48 (exp -> exp PLUS exp .)
    OR              reduce using rule 48 (exp -> exp PLUS exp .)
    LESSTHAN        reduce using rule 48 (exp -> exp PLUS exp .)
    GREATERTHAN     reduce using rule 48 (exp -> exp PLUS exp .)
    LESSEQUAL       reduce using rule 48 (exp -> exp PLUS exp .)
    GREATEREQUAL    reduce using rule 48 (exp -> exp PLUS exp .)
    NOTEQUAL        reduce using rule 48 (exp -> exp PLUS exp .)
    EQUALS          reduce using rule 48 (exp -> exp PLUS exp .)
    POW             reduce using rule 48 (exp -> exp PLUS exp .)
    SEMICOLON       reduce using rule 48 (exp -> exp PLUS exp .)
    LCURLY          reduce using rule 48 (exp -> exp PLUS exp .)
    DISPLAY         reduce using rule 48 (exp -> exp PLUS exp .)
    TYPE            reduce using rule 48 (exp -> exp PLUS exp .)
    IDENTIFIER      reduce using rule 48 (exp -> exp PLUS exp .)
    IF              reduce using rule 48 (exp -> exp PLUS exp .)
    LROUND          reduce using rule 48 (exp -> exp PLUS exp .)
    BOOL            reduce using rule 48 (exp -> exp PLUS exp .)
    STRING          reduce using rule 48 (exp -> exp PLUS exp .)
    INT             reduce using rule 48 (exp -> exp PLUS exp .)
    DOUBLE          reduce using rule 48 (exp -> exp PLUS exp .)
    CHAR            reduce using rule 48 (exp -> exp PLUS exp .)
    NOT             reduce using rule 48 (exp -> exp PLUS exp .)
    ELSEIF          reduce using rule 48 (exp -> exp PLUS exp .)
    ELSE            reduce using rule 48 (exp -> exp PLUS exp .)
    RCURLY          reduce using rule 48 (exp -> exp PLUS exp .)
    RROUND          reduce using rule 48 (exp -> exp PLUS exp .)
    COMMA           reduce using rule 48 (exp -> exp PLUS exp .)
    RSQBRAC         reduce using rule 48 (exp -> exp PLUS exp .)
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29

  ! MULTIPLY        [ reduce using rule 48 (exp -> exp PLUS exp .) ]
  ! DIVIDE          [ reduce using rule 48 (exp -> exp PLUS exp .) ]
  ! PLUS            [ shift and go to state 26 ]
  ! MINUS           [ shift and go to state 27 ]
  ! AND             [ shift and go to state 30 ]
  ! OR              [ shift and go to state 31 ]
  ! LESSTHAN        [ shift and go to state 32 ]
  ! GREATERTHAN     [ shift and go to state 33 ]
  ! LESSEQUAL       [ shift and go to state 34 ]
  ! GREATEREQUAL    [ shift and go to state 35 ]
  ! NOTEQUAL        [ shift and go to state 36 ]
  ! EQUALS          [ shift and go to state 37 ]
  ! POW             [ shift and go to state 38 ]


state 59

    (50) exp -> exp MINUS exp .
    (48) exp -> exp . PLUS exp
    (50) exp -> exp . MINUS exp
    (51) exp -> exp . MULTIPLY exp
    (52) exp -> exp . DIVIDE exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (56) exp -> exp . LESSTHAN exp
    (57) exp -> exp . GREATERTHAN exp
    (58) exp -> exp . LESSEQUAL exp
    (59) exp -> exp . GREATEREQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . POW exp

    PLUS            reduce using rule 50 (exp -> exp MINUS exp .)
    MINUS           reduce using rule 50 (exp -> exp MINUS exp .)
    AND             reduce using rule 50 (exp -> exp MINUS exp .)
    OR              reduce using rule 50 (exp -> exp MINUS exp .)
    LESSTHAN        reduce using rule 50 (exp -> exp MINUS exp .)
    GREATERTHAN     reduce using rule 50 (exp -> exp MINUS exp .)
    LESSEQUAL       reduce using rule 50 (exp -> exp MINUS exp .)
    GREATEREQUAL    reduce using rule 50 (exp -> exp MINUS exp .)
    NOTEQUAL        reduce using rule 50 (exp -> exp MINUS exp .)
    EQUALS          reduce using rule 50 (exp -> exp MINUS exp .)
    POW             reduce using rule 50 (exp -> exp MINUS exp .)
    SEMICOLON       reduce using rule 50 (exp -> exp MINUS exp .)
    RROUND          reduce using rule 50 (exp -> exp MINUS exp .)
    LCURLY          reduce using rule 50 (exp -> exp MINUS exp .)
    DISPLAY         reduce using rule 50 (exp -> exp MINUS exp .)
    TYPE            reduce using rule 50 (exp -> exp MINUS exp .)
    IDENTIFIER      reduce using rule 50 (exp -> exp MINUS exp .)
    IF              reduce using rule 50 (exp -> exp MINUS exp .)
    LROUND          reduce using rule 50 (exp -> exp MINUS exp .)
    BOOL            reduce using rule 50 (exp -> exp MINUS exp .)
    STRING          reduce using rule 50 (exp -> exp MINUS exp .)
    INT             reduce using rule 50 (exp -> exp MINUS exp .)
    DOUBLE          reduce using rule 50 (exp -> exp MINUS exp .)
    CHAR            reduce using rule 50 (exp -> exp MINUS exp .)
    NOT             reduce using rule 50 (exp -> exp MINUS exp .)
    ELSEIF          reduce using rule 50 (exp -> exp MINUS exp .)
    ELSE            reduce using rule 50 (exp -> exp MINUS exp .)
    RCURLY          reduce using rule 50 (exp -> exp MINUS exp .)
    COMMA           reduce using rule 50 (exp -> exp MINUS exp .)
    RSQBRAC         reduce using rule 50 (exp -> exp MINUS exp .)
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29

  ! MULTIPLY        [ reduce using rule 50 (exp -> exp MINUS exp .) ]
  ! DIVIDE          [ reduce using rule 50 (exp -> exp MINUS exp .) ]
  ! PLUS            [ shift and go to state 26 ]
  ! MINUS           [ shift and go to state 27 ]
  ! AND             [ shift and go to state 30 ]
  ! OR              [ shift and go to state 31 ]
  ! LESSTHAN        [ shift and go to state 32 ]
  ! GREATERTHAN     [ shift and go to state 33 ]
  ! LESSEQUAL       [ shift and go to state 34 ]
  ! GREATEREQUAL    [ shift and go to state 35 ]
  ! NOTEQUAL        [ shift and go to state 36 ]
  ! EQUALS          [ shift and go to state 37 ]
  ! POW             [ shift and go to state 38 ]


state 60

    (51) exp -> exp MULTIPLY exp .
    (48) exp -> exp . PLUS exp
    (50) exp -> exp . MINUS exp
    (51) exp -> exp . MULTIPLY exp
    (52) exp -> exp . DIVIDE exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (56) exp -> exp . LESSTHAN exp
    (57) exp -> exp . GREATERTHAN exp
    (58) exp -> exp . LESSEQUAL exp
    (59) exp -> exp . GREATEREQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . POW exp

    PLUS            reduce using rule 51 (exp -> exp MULTIPLY exp .)
    MINUS           reduce using rule 51 (exp -> exp MULTIPLY exp .)
    MULTIPLY        reduce using rule 51 (exp -> exp MULTIPLY exp .)
    DIVIDE          reduce using rule 51 (exp -> exp MULTIPLY exp .)
    AND             reduce using rule 51 (exp -> exp MULTIPLY exp .)
    OR              reduce using rule 51 (exp -> exp MULTIPLY exp .)
    LESSTHAN        reduce using rule 51 (exp -> exp MULTIPLY exp .)
    GREATERTHAN     reduce using rule 51 (exp -> exp MULTIPLY exp .)
    LESSEQUAL       reduce using rule 51 (exp -> exp MULTIPLY exp .)
    GREATEREQUAL    reduce using rule 51 (exp -> exp MULTIPLY exp .)
    NOTEQUAL        reduce using rule 51 (exp -> exp MULTIPLY exp .)
    EQUALS          reduce using rule 51 (exp -> exp MULTIPLY exp .)
    POW             reduce using rule 51 (exp -> exp MULTIPLY exp .)
    SEMICOLON       reduce using rule 51 (exp -> exp MULTIPLY exp .)
    RROUND          reduce using rule 51 (exp -> exp MULTIPLY exp .)
    LCURLY          reduce using rule 51 (exp -> exp MULTIPLY exp .)
    DISPLAY         reduce using rule 51 (exp -> exp MULTIPLY exp .)
    TYPE            reduce using rule 51 (exp -> exp MULTIPLY exp .)
    IDENTIFIER      reduce using rule 51 (exp -> exp MULTIPLY exp .)
    IF              reduce using rule 51 (exp -> exp MULTIPLY exp .)
    LROUND          reduce using rule 51 (exp -> exp MULTIPLY exp .)
    BOOL            reduce using rule 51 (exp -> exp MULTIPLY exp .)
    STRING          reduce using rule 51 (exp -> exp MULTIPLY exp .)
    INT             reduce using rule 51 (exp -> exp MULTIPLY exp .)
    DOUBLE          reduce using rule 51 (exp -> exp MULTIPLY exp .)
    CHAR            reduce using rule 51 (exp -> exp MULTIPLY exp .)
    NOT             reduce using rule 51 (exp -> exp MULTIPLY exp .)
    ELSEIF          reduce using rule 51 (exp -> exp MULTIPLY exp .)
    ELSE            reduce using rule 51 (exp -> exp MULTIPLY exp .)
    RCURLY          reduce using rule 51 (exp -> exp MULTIPLY exp .)
    COMMA           reduce using rule 51 (exp -> exp MULTIPLY exp .)
    RSQBRAC         reduce using rule 51 (exp -> exp MULTIPLY exp .)

  ! PLUS            [ shift and go to state 26 ]
  ! MINUS           [ shift and go to state 27 ]
  ! MULTIPLY        [ shift and go to state 28 ]
  ! DIVIDE          [ shift and go to state 29 ]
  ! AND             [ shift and go to state 30 ]
  ! OR              [ shift and go to state 31 ]
  ! LESSTHAN        [ shift and go to state 32 ]
  ! GREATERTHAN     [ shift and go to state 33 ]
  ! LESSEQUAL       [ shift and go to state 34 ]
  ! GREATEREQUAL    [ shift and go to state 35 ]
  ! NOTEQUAL        [ shift and go to state 36 ]
  ! EQUALS          [ shift and go to state 37 ]
  ! POW             [ shift and go to state 38 ]


state 61

    (52) exp -> exp DIVIDE exp .
    (48) exp -> exp . PLUS exp
    (50) exp -> exp . MINUS exp
    (51) exp -> exp . MULTIPLY exp
    (52) exp -> exp . DIVIDE exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (56) exp -> exp . LESSTHAN exp
    (57) exp -> exp . GREATERTHAN exp
    (58) exp -> exp . LESSEQUAL exp
    (59) exp -> exp . GREATEREQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . POW exp

    PLUS            reduce using rule 52 (exp -> exp DIVIDE exp .)
    MINUS           reduce using rule 52 (exp -> exp DIVIDE exp .)
    MULTIPLY        reduce using rule 52 (exp -> exp DIVIDE exp .)
    DIVIDE          reduce using rule 52 (exp -> exp DIVIDE exp .)
    AND             reduce using rule 52 (exp -> exp DIVIDE exp .)
    OR              reduce using rule 52 (exp -> exp DIVIDE exp .)
    LESSTHAN        reduce using rule 52 (exp -> exp DIVIDE exp .)
    GREATERTHAN     reduce using rule 52 (exp -> exp DIVIDE exp .)
    LESSEQUAL       reduce using rule 52 (exp -> exp DIVIDE exp .)
    GREATEREQUAL    reduce using rule 52 (exp -> exp DIVIDE exp .)
    NOTEQUAL        reduce using rule 52 (exp -> exp DIVIDE exp .)
    EQUALS          reduce using rule 52 (exp -> exp DIVIDE exp .)
    POW             reduce using rule 52 (exp -> exp DIVIDE exp .)
    SEMICOLON       reduce using rule 52 (exp -> exp DIVIDE exp .)
    RROUND          reduce using rule 52 (exp -> exp DIVIDE exp .)
    LCURLY          reduce using rule 52 (exp -> exp DIVIDE exp .)
    DISPLAY         reduce using rule 52 (exp -> exp DIVIDE exp .)
    TYPE            reduce using rule 52 (exp -> exp DIVIDE exp .)
    IDENTIFIER      reduce using rule 52 (exp -> exp DIVIDE exp .)
    IF              reduce using rule 52 (exp -> exp DIVIDE exp .)
    LROUND          reduce using rule 52 (exp -> exp DIVIDE exp .)
    BOOL            reduce using rule 52 (exp -> exp DIVIDE exp .)
    STRING          reduce using rule 52 (exp -> exp DIVIDE exp .)
    INT             reduce using rule 52 (exp -> exp DIVIDE exp .)
    DOUBLE          reduce using rule 52 (exp -> exp DIVIDE exp .)
    CHAR            reduce using rule 52 (exp -> exp DIVIDE exp .)
    NOT             reduce using rule 52 (exp -> exp DIVIDE exp .)
    ELSEIF          reduce using rule 52 (exp -> exp DIVIDE exp .)
    ELSE            reduce using rule 52 (exp -> exp DIVIDE exp .)
    RCURLY          reduce using rule 52 (exp -> exp DIVIDE exp .)
    COMMA           reduce using rule 52 (exp -> exp DIVIDE exp .)
    RSQBRAC         reduce using rule 52 (exp -> exp DIVIDE exp .)

  ! PLUS            [ shift and go to state 26 ]
  ! MINUS           [ shift and go to state 27 ]
  ! MULTIPLY        [ shift and go to state 28 ]
  ! DIVIDE          [ shift and go to state 29 ]
  ! AND             [ shift and go to state 30 ]
  ! OR              [ shift and go to state 31 ]
  ! LESSTHAN        [ shift and go to state 32 ]
  ! GREATERTHAN     [ shift and go to state 33 ]
  ! LESSEQUAL       [ shift and go to state 34 ]
  ! GREATEREQUAL    [ shift and go to state 35 ]
  ! NOTEQUAL        [ shift and go to state 36 ]
  ! EQUALS          [ shift and go to state 37 ]
  ! POW             [ shift and go to state 38 ]


state 62

    (54) exp -> exp AND exp .
    (48) exp -> exp . PLUS exp
    (50) exp -> exp . MINUS exp
    (51) exp -> exp . MULTIPLY exp
    (52) exp -> exp . DIVIDE exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (56) exp -> exp . LESSTHAN exp
    (57) exp -> exp . GREATERTHAN exp
    (58) exp -> exp . LESSEQUAL exp
    (59) exp -> exp . GREATEREQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . POW exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for GREATEREQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    SEMICOLON       reduce using rule 54 (exp -> exp AND exp .)
    RROUND          reduce using rule 54 (exp -> exp AND exp .)
    LCURLY          reduce using rule 54 (exp -> exp AND exp .)
    DISPLAY         reduce using rule 54 (exp -> exp AND exp .)
    TYPE            reduce using rule 54 (exp -> exp AND exp .)
    IDENTIFIER      reduce using rule 54 (exp -> exp AND exp .)
    IF              reduce using rule 54 (exp -> exp AND exp .)
    LROUND          reduce using rule 54 (exp -> exp AND exp .)
    BOOL            reduce using rule 54 (exp -> exp AND exp .)
    STRING          reduce using rule 54 (exp -> exp AND exp .)
    INT             reduce using rule 54 (exp -> exp AND exp .)
    DOUBLE          reduce using rule 54 (exp -> exp AND exp .)
    CHAR            reduce using rule 54 (exp -> exp AND exp .)
    NOT             reduce using rule 54 (exp -> exp AND exp .)
    ELSEIF          reduce using rule 54 (exp -> exp AND exp .)
    ELSE            reduce using rule 54 (exp -> exp AND exp .)
    RCURLY          reduce using rule 54 (exp -> exp AND exp .)
    COMMA           reduce using rule 54 (exp -> exp AND exp .)
    RSQBRAC         reduce using rule 54 (exp -> exp AND exp .)
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    AND             shift and go to state 30
    OR              shift and go to state 31
    LESSTHAN        shift and go to state 32
    GREATERTHAN     shift and go to state 33
    LESSEQUAL       shift and go to state 34
    GREATEREQUAL    shift and go to state 35
    NOTEQUAL        shift and go to state 36
    EQUALS          shift and go to state 37
    POW             shift and go to state 38

  ! PLUS            [ reduce using rule 54 (exp -> exp AND exp .) ]
  ! MINUS           [ reduce using rule 54 (exp -> exp AND exp .) ]
  ! MULTIPLY        [ reduce using rule 54 (exp -> exp AND exp .) ]
  ! DIVIDE          [ reduce using rule 54 (exp -> exp AND exp .) ]
  ! AND             [ reduce using rule 54 (exp -> exp AND exp .) ]
  ! OR              [ reduce using rule 54 (exp -> exp AND exp .) ]
  ! LESSTHAN        [ reduce using rule 54 (exp -> exp AND exp .) ]
  ! GREATERTHAN     [ reduce using rule 54 (exp -> exp AND exp .) ]
  ! LESSEQUAL       [ reduce using rule 54 (exp -> exp AND exp .) ]
  ! GREATEREQUAL    [ reduce using rule 54 (exp -> exp AND exp .) ]
  ! NOTEQUAL        [ reduce using rule 54 (exp -> exp AND exp .) ]
  ! EQUALS          [ reduce using rule 54 (exp -> exp AND exp .) ]
  ! POW             [ reduce using rule 54 (exp -> exp AND exp .) ]


state 63

    (55) exp -> exp OR exp .
    (48) exp -> exp . PLUS exp
    (50) exp -> exp . MINUS exp
    (51) exp -> exp . MULTIPLY exp
    (52) exp -> exp . DIVIDE exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (56) exp -> exp . LESSTHAN exp
    (57) exp -> exp . GREATERTHAN exp
    (58) exp -> exp . LESSEQUAL exp
    (59) exp -> exp . GREATEREQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . POW exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for GREATEREQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    SEMICOLON       reduce using rule 55 (exp -> exp OR exp .)
    RROUND          reduce using rule 55 (exp -> exp OR exp .)
    LCURLY          reduce using rule 55 (exp -> exp OR exp .)
    DISPLAY         reduce using rule 55 (exp -> exp OR exp .)
    TYPE            reduce using rule 55 (exp -> exp OR exp .)
    IDENTIFIER      reduce using rule 55 (exp -> exp OR exp .)
    IF              reduce using rule 55 (exp -> exp OR exp .)
    LROUND          reduce using rule 55 (exp -> exp OR exp .)
    BOOL            reduce using rule 55 (exp -> exp OR exp .)
    STRING          reduce using rule 55 (exp -> exp OR exp .)
    INT             reduce using rule 55 (exp -> exp OR exp .)
    DOUBLE          reduce using rule 55 (exp -> exp OR exp .)
    CHAR            reduce using rule 55 (exp -> exp OR exp .)
    NOT             reduce using rule 55 (exp -> exp OR exp .)
    ELSEIF          reduce using rule 55 (exp -> exp OR exp .)
    ELSE            reduce using rule 55 (exp -> exp OR exp .)
    RCURLY          reduce using rule 55 (exp -> exp OR exp .)
    COMMA           reduce using rule 55 (exp -> exp OR exp .)
    RSQBRAC         reduce using rule 55 (exp -> exp OR exp .)
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    AND             shift and go to state 30
    OR              shift and go to state 31
    LESSTHAN        shift and go to state 32
    GREATERTHAN     shift and go to state 33
    LESSEQUAL       shift and go to state 34
    GREATEREQUAL    shift and go to state 35
    NOTEQUAL        shift and go to state 36
    EQUALS          shift and go to state 37
    POW             shift and go to state 38

  ! PLUS            [ reduce using rule 55 (exp -> exp OR exp .) ]
  ! MINUS           [ reduce using rule 55 (exp -> exp OR exp .) ]
  ! MULTIPLY        [ reduce using rule 55 (exp -> exp OR exp .) ]
  ! DIVIDE          [ reduce using rule 55 (exp -> exp OR exp .) ]
  ! AND             [ reduce using rule 55 (exp -> exp OR exp .) ]
  ! OR              [ reduce using rule 55 (exp -> exp OR exp .) ]
  ! LESSTHAN        [ reduce using rule 55 (exp -> exp OR exp .) ]
  ! GREATERTHAN     [ reduce using rule 55 (exp -> exp OR exp .) ]
  ! LESSEQUAL       [ reduce using rule 55 (exp -> exp OR exp .) ]
  ! GREATEREQUAL    [ reduce using rule 55 (exp -> exp OR exp .) ]
  ! NOTEQUAL        [ reduce using rule 55 (exp -> exp OR exp .) ]
  ! EQUALS          [ reduce using rule 55 (exp -> exp OR exp .) ]
  ! POW             [ reduce using rule 55 (exp -> exp OR exp .) ]


state 64

    (56) exp -> exp LESSTHAN exp .
    (48) exp -> exp . PLUS exp
    (50) exp -> exp . MINUS exp
    (51) exp -> exp . MULTIPLY exp
    (52) exp -> exp . DIVIDE exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (56) exp -> exp . LESSTHAN exp
    (57) exp -> exp . GREATERTHAN exp
    (58) exp -> exp . LESSEQUAL exp
    (59) exp -> exp . GREATEREQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . POW exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for GREATEREQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    SEMICOLON       reduce using rule 56 (exp -> exp LESSTHAN exp .)
    RROUND          reduce using rule 56 (exp -> exp LESSTHAN exp .)
    LCURLY          reduce using rule 56 (exp -> exp LESSTHAN exp .)
    DISPLAY         reduce using rule 56 (exp -> exp LESSTHAN exp .)
    TYPE            reduce using rule 56 (exp -> exp LESSTHAN exp .)
    IDENTIFIER      reduce using rule 56 (exp -> exp LESSTHAN exp .)
    IF              reduce using rule 56 (exp -> exp LESSTHAN exp .)
    LROUND          reduce using rule 56 (exp -> exp LESSTHAN exp .)
    BOOL            reduce using rule 56 (exp -> exp LESSTHAN exp .)
    STRING          reduce using rule 56 (exp -> exp LESSTHAN exp .)
    INT             reduce using rule 56 (exp -> exp LESSTHAN exp .)
    DOUBLE          reduce using rule 56 (exp -> exp LESSTHAN exp .)
    CHAR            reduce using rule 56 (exp -> exp LESSTHAN exp .)
    NOT             reduce using rule 56 (exp -> exp LESSTHAN exp .)
    ELSEIF          reduce using rule 56 (exp -> exp LESSTHAN exp .)
    ELSE            reduce using rule 56 (exp -> exp LESSTHAN exp .)
    RCURLY          reduce using rule 56 (exp -> exp LESSTHAN exp .)
    COMMA           reduce using rule 56 (exp -> exp LESSTHAN exp .)
    RSQBRAC         reduce using rule 56 (exp -> exp LESSTHAN exp .)
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    AND             shift and go to state 30
    OR              shift and go to state 31
    LESSTHAN        shift and go to state 32
    GREATERTHAN     shift and go to state 33
    LESSEQUAL       shift and go to state 34
    GREATEREQUAL    shift and go to state 35
    NOTEQUAL        shift and go to state 36
    EQUALS          shift and go to state 37
    POW             shift and go to state 38

  ! PLUS            [ reduce using rule 56 (exp -> exp LESSTHAN exp .) ]
  ! MINUS           [ reduce using rule 56 (exp -> exp LESSTHAN exp .) ]
  ! MULTIPLY        [ reduce using rule 56 (exp -> exp LESSTHAN exp .) ]
  ! DIVIDE          [ reduce using rule 56 (exp -> exp LESSTHAN exp .) ]
  ! AND             [ reduce using rule 56 (exp -> exp LESSTHAN exp .) ]
  ! OR              [ reduce using rule 56 (exp -> exp LESSTHAN exp .) ]
  ! LESSTHAN        [ reduce using rule 56 (exp -> exp LESSTHAN exp .) ]
  ! GREATERTHAN     [ reduce using rule 56 (exp -> exp LESSTHAN exp .) ]
  ! LESSEQUAL       [ reduce using rule 56 (exp -> exp LESSTHAN exp .) ]
  ! GREATEREQUAL    [ reduce using rule 56 (exp -> exp LESSTHAN exp .) ]
  ! NOTEQUAL        [ reduce using rule 56 (exp -> exp LESSTHAN exp .) ]
  ! EQUALS          [ reduce using rule 56 (exp -> exp LESSTHAN exp .) ]
  ! POW             [ reduce using rule 56 (exp -> exp LESSTHAN exp .) ]


state 65

    (57) exp -> exp GREATERTHAN exp .
    (48) exp -> exp . PLUS exp
    (50) exp -> exp . MINUS exp
    (51) exp -> exp . MULTIPLY exp
    (52) exp -> exp . DIVIDE exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (56) exp -> exp . LESSTHAN exp
    (57) exp -> exp . GREATERTHAN exp
    (58) exp -> exp . LESSEQUAL exp
    (59) exp -> exp . GREATEREQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . POW exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for GREATEREQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    SEMICOLON       reduce using rule 57 (exp -> exp GREATERTHAN exp .)
    RROUND          reduce using rule 57 (exp -> exp GREATERTHAN exp .)
    LCURLY          reduce using rule 57 (exp -> exp GREATERTHAN exp .)
    DISPLAY         reduce using rule 57 (exp -> exp GREATERTHAN exp .)
    TYPE            reduce using rule 57 (exp -> exp GREATERTHAN exp .)
    IDENTIFIER      reduce using rule 57 (exp -> exp GREATERTHAN exp .)
    IF              reduce using rule 57 (exp -> exp GREATERTHAN exp .)
    LROUND          reduce using rule 57 (exp -> exp GREATERTHAN exp .)
    BOOL            reduce using rule 57 (exp -> exp GREATERTHAN exp .)
    STRING          reduce using rule 57 (exp -> exp GREATERTHAN exp .)
    INT             reduce using rule 57 (exp -> exp GREATERTHAN exp .)
    DOUBLE          reduce using rule 57 (exp -> exp GREATERTHAN exp .)
    CHAR            reduce using rule 57 (exp -> exp GREATERTHAN exp .)
    NOT             reduce using rule 57 (exp -> exp GREATERTHAN exp .)
    ELSEIF          reduce using rule 57 (exp -> exp GREATERTHAN exp .)
    ELSE            reduce using rule 57 (exp -> exp GREATERTHAN exp .)
    RCURLY          reduce using rule 57 (exp -> exp GREATERTHAN exp .)
    COMMA           reduce using rule 57 (exp -> exp GREATERTHAN exp .)
    RSQBRAC         reduce using rule 57 (exp -> exp GREATERTHAN exp .)
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    AND             shift and go to state 30
    OR              shift and go to state 31
    LESSTHAN        shift and go to state 32
    GREATERTHAN     shift and go to state 33
    LESSEQUAL       shift and go to state 34
    GREATEREQUAL    shift and go to state 35
    NOTEQUAL        shift and go to state 36
    EQUALS          shift and go to state 37
    POW             shift and go to state 38

  ! PLUS            [ reduce using rule 57 (exp -> exp GREATERTHAN exp .) ]
  ! MINUS           [ reduce using rule 57 (exp -> exp GREATERTHAN exp .) ]
  ! MULTIPLY        [ reduce using rule 57 (exp -> exp GREATERTHAN exp .) ]
  ! DIVIDE          [ reduce using rule 57 (exp -> exp GREATERTHAN exp .) ]
  ! AND             [ reduce using rule 57 (exp -> exp GREATERTHAN exp .) ]
  ! OR              [ reduce using rule 57 (exp -> exp GREATERTHAN exp .) ]
  ! LESSTHAN        [ reduce using rule 57 (exp -> exp GREATERTHAN exp .) ]
  ! GREATERTHAN     [ reduce using rule 57 (exp -> exp GREATERTHAN exp .) ]
  ! LESSEQUAL       [ reduce using rule 57 (exp -> exp GREATERTHAN exp .) ]
  ! GREATEREQUAL    [ reduce using rule 57 (exp -> exp GREATERTHAN exp .) ]
  ! NOTEQUAL        [ reduce using rule 57 (exp -> exp GREATERTHAN exp .) ]
  ! EQUALS          [ reduce using rule 57 (exp -> exp GREATERTHAN exp .) ]
  ! POW             [ reduce using rule 57 (exp -> exp GREATERTHAN exp .) ]


state 66

    (58) exp -> exp LESSEQUAL exp .
    (48) exp -> exp . PLUS exp
    (50) exp -> exp . MINUS exp
    (51) exp -> exp . MULTIPLY exp
    (52) exp -> exp . DIVIDE exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (56) exp -> exp . LESSTHAN exp
    (57) exp -> exp . GREATERTHAN exp
    (58) exp -> exp . LESSEQUAL exp
    (59) exp -> exp . GREATEREQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . POW exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for GREATEREQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    SEMICOLON       reduce using rule 58 (exp -> exp LESSEQUAL exp .)
    RROUND          reduce using rule 58 (exp -> exp LESSEQUAL exp .)
    LCURLY          reduce using rule 58 (exp -> exp LESSEQUAL exp .)
    DISPLAY         reduce using rule 58 (exp -> exp LESSEQUAL exp .)
    TYPE            reduce using rule 58 (exp -> exp LESSEQUAL exp .)
    IDENTIFIER      reduce using rule 58 (exp -> exp LESSEQUAL exp .)
    IF              reduce using rule 58 (exp -> exp LESSEQUAL exp .)
    LROUND          reduce using rule 58 (exp -> exp LESSEQUAL exp .)
    BOOL            reduce using rule 58 (exp -> exp LESSEQUAL exp .)
    STRING          reduce using rule 58 (exp -> exp LESSEQUAL exp .)
    INT             reduce using rule 58 (exp -> exp LESSEQUAL exp .)
    DOUBLE          reduce using rule 58 (exp -> exp LESSEQUAL exp .)
    CHAR            reduce using rule 58 (exp -> exp LESSEQUAL exp .)
    NOT             reduce using rule 58 (exp -> exp LESSEQUAL exp .)
    ELSEIF          reduce using rule 58 (exp -> exp LESSEQUAL exp .)
    ELSE            reduce using rule 58 (exp -> exp LESSEQUAL exp .)
    RCURLY          reduce using rule 58 (exp -> exp LESSEQUAL exp .)
    COMMA           reduce using rule 58 (exp -> exp LESSEQUAL exp .)
    RSQBRAC         reduce using rule 58 (exp -> exp LESSEQUAL exp .)
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    AND             shift and go to state 30
    OR              shift and go to state 31
    LESSTHAN        shift and go to state 32
    GREATERTHAN     shift and go to state 33
    LESSEQUAL       shift and go to state 34
    GREATEREQUAL    shift and go to state 35
    NOTEQUAL        shift and go to state 36
    EQUALS          shift and go to state 37
    POW             shift and go to state 38

  ! PLUS            [ reduce using rule 58 (exp -> exp LESSEQUAL exp .) ]
  ! MINUS           [ reduce using rule 58 (exp -> exp LESSEQUAL exp .) ]
  ! MULTIPLY        [ reduce using rule 58 (exp -> exp LESSEQUAL exp .) ]
  ! DIVIDE          [ reduce using rule 58 (exp -> exp LESSEQUAL exp .) ]
  ! AND             [ reduce using rule 58 (exp -> exp LESSEQUAL exp .) ]
  ! OR              [ reduce using rule 58 (exp -> exp LESSEQUAL exp .) ]
  ! LESSTHAN        [ reduce using rule 58 (exp -> exp LESSEQUAL exp .) ]
  ! GREATERTHAN     [ reduce using rule 58 (exp -> exp LESSEQUAL exp .) ]
  ! LESSEQUAL       [ reduce using rule 58 (exp -> exp LESSEQUAL exp .) ]
  ! GREATEREQUAL    [ reduce using rule 58 (exp -> exp LESSEQUAL exp .) ]
  ! NOTEQUAL        [ reduce using rule 58 (exp -> exp LESSEQUAL exp .) ]
  ! EQUALS          [ reduce using rule 58 (exp -> exp LESSEQUAL exp .) ]
  ! POW             [ reduce using rule 58 (exp -> exp LESSEQUAL exp .) ]


state 67

    (59) exp -> exp GREATEREQUAL exp .
    (48) exp -> exp . PLUS exp
    (50) exp -> exp . MINUS exp
    (51) exp -> exp . MULTIPLY exp
    (52) exp -> exp . DIVIDE exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (56) exp -> exp . LESSTHAN exp
    (57) exp -> exp . GREATERTHAN exp
    (58) exp -> exp . LESSEQUAL exp
    (59) exp -> exp . GREATEREQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . POW exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for GREATEREQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    SEMICOLON       reduce using rule 59 (exp -> exp GREATEREQUAL exp .)
    RROUND          reduce using rule 59 (exp -> exp GREATEREQUAL exp .)
    LCURLY          reduce using rule 59 (exp -> exp GREATEREQUAL exp .)
    DISPLAY         reduce using rule 59 (exp -> exp GREATEREQUAL exp .)
    TYPE            reduce using rule 59 (exp -> exp GREATEREQUAL exp .)
    IDENTIFIER      reduce using rule 59 (exp -> exp GREATEREQUAL exp .)
    IF              reduce using rule 59 (exp -> exp GREATEREQUAL exp .)
    LROUND          reduce using rule 59 (exp -> exp GREATEREQUAL exp .)
    BOOL            reduce using rule 59 (exp -> exp GREATEREQUAL exp .)
    STRING          reduce using rule 59 (exp -> exp GREATEREQUAL exp .)
    INT             reduce using rule 59 (exp -> exp GREATEREQUAL exp .)
    DOUBLE          reduce using rule 59 (exp -> exp GREATEREQUAL exp .)
    CHAR            reduce using rule 59 (exp -> exp GREATEREQUAL exp .)
    NOT             reduce using rule 59 (exp -> exp GREATEREQUAL exp .)
    ELSEIF          reduce using rule 59 (exp -> exp GREATEREQUAL exp .)
    ELSE            reduce using rule 59 (exp -> exp GREATEREQUAL exp .)
    RCURLY          reduce using rule 59 (exp -> exp GREATEREQUAL exp .)
    COMMA           reduce using rule 59 (exp -> exp GREATEREQUAL exp .)
    RSQBRAC         reduce using rule 59 (exp -> exp GREATEREQUAL exp .)
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    AND             shift and go to state 30
    OR              shift and go to state 31
    LESSTHAN        shift and go to state 32
    GREATERTHAN     shift and go to state 33
    LESSEQUAL       shift and go to state 34
    GREATEREQUAL    shift and go to state 35
    NOTEQUAL        shift and go to state 36
    EQUALS          shift and go to state 37
    POW             shift and go to state 38

  ! PLUS            [ reduce using rule 59 (exp -> exp GREATEREQUAL exp .) ]
  ! MINUS           [ reduce using rule 59 (exp -> exp GREATEREQUAL exp .) ]
  ! MULTIPLY        [ reduce using rule 59 (exp -> exp GREATEREQUAL exp .) ]
  ! DIVIDE          [ reduce using rule 59 (exp -> exp GREATEREQUAL exp .) ]
  ! AND             [ reduce using rule 59 (exp -> exp GREATEREQUAL exp .) ]
  ! OR              [ reduce using rule 59 (exp -> exp GREATEREQUAL exp .) ]
  ! LESSTHAN        [ reduce using rule 59 (exp -> exp GREATEREQUAL exp .) ]
  ! GREATERTHAN     [ reduce using rule 59 (exp -> exp GREATEREQUAL exp .) ]
  ! LESSEQUAL       [ reduce using rule 59 (exp -> exp GREATEREQUAL exp .) ]
  ! GREATEREQUAL    [ reduce using rule 59 (exp -> exp GREATEREQUAL exp .) ]
  ! NOTEQUAL        [ reduce using rule 59 (exp -> exp GREATEREQUAL exp .) ]
  ! EQUALS          [ reduce using rule 59 (exp -> exp GREATEREQUAL exp .) ]
  ! POW             [ reduce using rule 59 (exp -> exp GREATEREQUAL exp .) ]


state 68

    (60) exp -> exp NOTEQUAL exp .
    (48) exp -> exp . PLUS exp
    (50) exp -> exp . MINUS exp
    (51) exp -> exp . MULTIPLY exp
    (52) exp -> exp . DIVIDE exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (56) exp -> exp . LESSTHAN exp
    (57) exp -> exp . GREATERTHAN exp
    (58) exp -> exp . LESSEQUAL exp
    (59) exp -> exp . GREATEREQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . POW exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for GREATEREQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    SEMICOLON       reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    RROUND          reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    LCURLY          reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    DISPLAY         reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    TYPE            reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    IDENTIFIER      reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    IF              reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    LROUND          reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    BOOL            reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    STRING          reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    INT             reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    DOUBLE          reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    CHAR            reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    NOT             reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    ELSEIF          reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    ELSE            reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    RCURLY          reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    COMMA           reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    RSQBRAC         reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    AND             shift and go to state 30
    OR              shift and go to state 31
    LESSTHAN        shift and go to state 32
    GREATERTHAN     shift and go to state 33
    LESSEQUAL       shift and go to state 34
    GREATEREQUAL    shift and go to state 35
    NOTEQUAL        shift and go to state 36
    EQUALS          shift and go to state 37
    POW             shift and go to state 38

  ! PLUS            [ reduce using rule 60 (exp -> exp NOTEQUAL exp .) ]
  ! MINUS           [ reduce using rule 60 (exp -> exp NOTEQUAL exp .) ]
  ! MULTIPLY        [ reduce using rule 60 (exp -> exp NOTEQUAL exp .) ]
  ! DIVIDE          [ reduce using rule 60 (exp -> exp NOTEQUAL exp .) ]
  ! AND             [ reduce using rule 60 (exp -> exp NOTEQUAL exp .) ]
  ! OR              [ reduce using rule 60 (exp -> exp NOTEQUAL exp .) ]
  ! LESSTHAN        [ reduce using rule 60 (exp -> exp NOTEQUAL exp .) ]
  ! GREATERTHAN     [ reduce using rule 60 (exp -> exp NOTEQUAL exp .) ]
  ! LESSEQUAL       [ reduce using rule 60 (exp -> exp NOTEQUAL exp .) ]
  ! GREATEREQUAL    [ reduce using rule 60 (exp -> exp NOTEQUAL exp .) ]
  ! NOTEQUAL        [ reduce using rule 60 (exp -> exp NOTEQUAL exp .) ]
  ! EQUALS          [ reduce using rule 60 (exp -> exp NOTEQUAL exp .) ]
  ! POW             [ reduce using rule 60 (exp -> exp NOTEQUAL exp .) ]


state 69

    (61) exp -> exp EQUALS exp .
    (48) exp -> exp . PLUS exp
    (50) exp -> exp . MINUS exp
    (51) exp -> exp . MULTIPLY exp
    (52) exp -> exp . DIVIDE exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (56) exp -> exp . LESSTHAN exp
    (57) exp -> exp . GREATERTHAN exp
    (58) exp -> exp . LESSEQUAL exp
    (59) exp -> exp . GREATEREQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . POW exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for GREATEREQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    SEMICOLON       reduce using rule 61 (exp -> exp EQUALS exp .)
    RROUND          reduce using rule 61 (exp -> exp EQUALS exp .)
    LCURLY          reduce using rule 61 (exp -> exp EQUALS exp .)
    DISPLAY         reduce using rule 61 (exp -> exp EQUALS exp .)
    TYPE            reduce using rule 61 (exp -> exp EQUALS exp .)
    IDENTIFIER      reduce using rule 61 (exp -> exp EQUALS exp .)
    IF              reduce using rule 61 (exp -> exp EQUALS exp .)
    LROUND          reduce using rule 61 (exp -> exp EQUALS exp .)
    BOOL            reduce using rule 61 (exp -> exp EQUALS exp .)
    STRING          reduce using rule 61 (exp -> exp EQUALS exp .)
    INT             reduce using rule 61 (exp -> exp EQUALS exp .)
    DOUBLE          reduce using rule 61 (exp -> exp EQUALS exp .)
    CHAR            reduce using rule 61 (exp -> exp EQUALS exp .)
    NOT             reduce using rule 61 (exp -> exp EQUALS exp .)
    ELSEIF          reduce using rule 61 (exp -> exp EQUALS exp .)
    ELSE            reduce using rule 61 (exp -> exp EQUALS exp .)
    RCURLY          reduce using rule 61 (exp -> exp EQUALS exp .)
    COMMA           reduce using rule 61 (exp -> exp EQUALS exp .)
    RSQBRAC         reduce using rule 61 (exp -> exp EQUALS exp .)
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    AND             shift and go to state 30
    OR              shift and go to state 31
    LESSTHAN        shift and go to state 32
    GREATERTHAN     shift and go to state 33
    LESSEQUAL       shift and go to state 34
    GREATEREQUAL    shift and go to state 35
    NOTEQUAL        shift and go to state 36
    EQUALS          shift and go to state 37
    POW             shift and go to state 38

  ! PLUS            [ reduce using rule 61 (exp -> exp EQUALS exp .) ]
  ! MINUS           [ reduce using rule 61 (exp -> exp EQUALS exp .) ]
  ! MULTIPLY        [ reduce using rule 61 (exp -> exp EQUALS exp .) ]
  ! DIVIDE          [ reduce using rule 61 (exp -> exp EQUALS exp .) ]
  ! AND             [ reduce using rule 61 (exp -> exp EQUALS exp .) ]
  ! OR              [ reduce using rule 61 (exp -> exp EQUALS exp .) ]
  ! LESSTHAN        [ reduce using rule 61 (exp -> exp EQUALS exp .) ]
  ! GREATERTHAN     [ reduce using rule 61 (exp -> exp EQUALS exp .) ]
  ! LESSEQUAL       [ reduce using rule 61 (exp -> exp EQUALS exp .) ]
  ! GREATEREQUAL    [ reduce using rule 61 (exp -> exp EQUALS exp .) ]
  ! NOTEQUAL        [ reduce using rule 61 (exp -> exp EQUALS exp .) ]
  ! EQUALS          [ reduce using rule 61 (exp -> exp EQUALS exp .) ]
  ! POW             [ reduce using rule 61 (exp -> exp EQUALS exp .) ]


state 70

    (62) exp -> exp POW exp .
    (48) exp -> exp . PLUS exp
    (50) exp -> exp . MINUS exp
    (51) exp -> exp . MULTIPLY exp
    (52) exp -> exp . DIVIDE exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (56) exp -> exp . LESSTHAN exp
    (57) exp -> exp . GREATERTHAN exp
    (58) exp -> exp . LESSEQUAL exp
    (59) exp -> exp . GREATEREQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . POW exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for GREATEREQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    SEMICOLON       reduce using rule 62 (exp -> exp POW exp .)
    RROUND          reduce using rule 62 (exp -> exp POW exp .)
    LCURLY          reduce using rule 62 (exp -> exp POW exp .)
    DISPLAY         reduce using rule 62 (exp -> exp POW exp .)
    TYPE            reduce using rule 62 (exp -> exp POW exp .)
    IDENTIFIER      reduce using rule 62 (exp -> exp POW exp .)
    IF              reduce using rule 62 (exp -> exp POW exp .)
    LROUND          reduce using rule 62 (exp -> exp POW exp .)
    BOOL            reduce using rule 62 (exp -> exp POW exp .)
    STRING          reduce using rule 62 (exp -> exp POW exp .)
    INT             reduce using rule 62 (exp -> exp POW exp .)
    DOUBLE          reduce using rule 62 (exp -> exp POW exp .)
    CHAR            reduce using rule 62 (exp -> exp POW exp .)
    NOT             reduce using rule 62 (exp -> exp POW exp .)
    ELSEIF          reduce using rule 62 (exp -> exp POW exp .)
    ELSE            reduce using rule 62 (exp -> exp POW exp .)
    RCURLY          reduce using rule 62 (exp -> exp POW exp .)
    COMMA           reduce using rule 62 (exp -> exp POW exp .)
    RSQBRAC         reduce using rule 62 (exp -> exp POW exp .)
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    AND             shift and go to state 30
    OR              shift and go to state 31
    LESSTHAN        shift and go to state 32
    GREATERTHAN     shift and go to state 33
    LESSEQUAL       shift and go to state 34
    GREATEREQUAL    shift and go to state 35
    NOTEQUAL        shift and go to state 36
    EQUALS          shift and go to state 37
    POW             shift and go to state 38

  ! PLUS            [ reduce using rule 62 (exp -> exp POW exp .) ]
  ! MINUS           [ reduce using rule 62 (exp -> exp POW exp .) ]
  ! MULTIPLY        [ reduce using rule 62 (exp -> exp POW exp .) ]
  ! DIVIDE          [ reduce using rule 62 (exp -> exp POW exp .) ]
  ! AND             [ reduce using rule 62 (exp -> exp POW exp .) ]
  ! OR              [ reduce using rule 62 (exp -> exp POW exp .) ]
  ! LESSTHAN        [ reduce using rule 62 (exp -> exp POW exp .) ]
  ! GREATERTHAN     [ reduce using rule 62 (exp -> exp POW exp .) ]
  ! LESSEQUAL       [ reduce using rule 62 (exp -> exp POW exp .) ]
  ! GREATEREQUAL    [ reduce using rule 62 (exp -> exp POW exp .) ]
  ! NOTEQUAL        [ reduce using rule 62 (exp -> exp POW exp .) ]
  ! EQUALS          [ reduce using rule 62 (exp -> exp POW exp .) ]
  ! POW             [ reduce using rule 62 (exp -> exp POW exp .) ]


state 71

    (7) if -> IF exp c_stmt .

    ELSEIF          reduce using rule 7 (if -> IF exp c_stmt .)
    ELSE            reduce using rule 7 (if -> IF exp c_stmt .)
    SEMICOLON       reduce using rule 7 (if -> IF exp c_stmt .)
    RCURLY          reduce using rule 7 (if -> IF exp c_stmt .)


state 72

    (13) c_stmt -> LCURLY . c_stmt RCURLY
    (13) c_stmt -> . LCURLY c_stmt RCURLY
    (14) c_stmt -> . stmt
    (15) c_stmt -> .
    (2) stmt -> . DISPLAY LROUND optparams RROUND
    (6) stmt -> . if elseif else
    (16) stmt -> . TYPE IDENTIFIER ASSIGN LSQBRAC listparams RSQBRAC
    (37) stmt -> . IDENTIFIER ASSIGN exp
    (38) stmt -> . TYPE IDENTIFIER
    (39) stmt -> . TYPE IDENTIFIER ASSIGN exp
    (40) stmt -> . exp
    (7) if -> . IF exp c_stmt
    (25) exp -> . IDENTIFIER LSQBRAC optparams RSQBRAC
    (26) exp -> . IDENTIFIER DOT list_functions
    (41) exp -> . LROUND exp RROUND
    (42) exp -> . BOOL
    (43) exp -> . IDENTIFIER
    (44) exp -> . STRING
    (45) exp -> . INT
    (46) exp -> . DOUBLE
    (47) exp -> . CHAR
    (48) exp -> . exp PLUS exp
    (49) exp -> . LROUND exp PLUS exp RROUND
    (50) exp -> . exp MINUS exp
    (51) exp -> . exp MULTIPLY exp
    (52) exp -> . exp DIVIDE exp
    (53) exp -> . NOT exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . exp LESSTHAN exp
    (57) exp -> . exp GREATERTHAN exp
    (58) exp -> . exp LESSEQUAL exp
    (59) exp -> . exp GREATEREQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp POW exp

    LCURLY          shift and go to state 72
    RCURLY          reduce using rule 15 (c_stmt -> .)
    DISPLAY         shift and go to state 3
    TYPE            shift and go to state 6
    IDENTIFIER      shift and go to state 7
    IF              shift and go to state 9
    LROUND          shift and go to state 4
    BOOL            shift and go to state 10
    STRING          shift and go to state 11
    INT             shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    NOT             shift and go to state 15

    c_stmt                         shift and go to state 87
    stmt                           shift and go to state 73
    if                             shift and go to state 5
    exp                            shift and go to state 8

state 73

    (14) c_stmt -> stmt .

    ELSE            reduce using rule 14 (c_stmt -> stmt .)
    SEMICOLON       reduce using rule 14 (c_stmt -> stmt .)
    ELSEIF          reduce using rule 14 (c_stmt -> stmt .)
    RCURLY          reduce using rule 14 (c_stmt -> stmt .)


state 74

    (2) stmt -> DISPLAY LROUND optparams RROUND .

    SEMICOLON       reduce using rule 2 (stmt -> DISPLAY LROUND optparams RROUND .)
    ELSE            reduce using rule 2 (stmt -> DISPLAY LROUND optparams RROUND .)
    ELSEIF          reduce using rule 2 (stmt -> DISPLAY LROUND optparams RROUND .)
    RCURLY          reduce using rule 2 (stmt -> DISPLAY LROUND optparams RROUND .)


state 75

    (3) optparams -> params l_comma . params
    (5) params -> . exp
    (25) exp -> . IDENTIFIER LSQBRAC optparams RSQBRAC
    (26) exp -> . IDENTIFIER DOT list_functions
    (41) exp -> . LROUND exp RROUND
    (42) exp -> . BOOL
    (43) exp -> . IDENTIFIER
    (44) exp -> . STRING
    (45) exp -> . INT
    (46) exp -> . DOUBLE
    (47) exp -> . CHAR
    (48) exp -> . exp PLUS exp
    (49) exp -> . LROUND exp PLUS exp RROUND
    (50) exp -> . exp MINUS exp
    (51) exp -> . exp MULTIPLY exp
    (52) exp -> . exp DIVIDE exp
    (53) exp -> . NOT exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . exp LESSTHAN exp
    (57) exp -> . exp GREATERTHAN exp
    (58) exp -> . exp LESSEQUAL exp
    (59) exp -> . exp GREATEREQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp POW exp

    IDENTIFIER      shift and go to state 19
    LROUND          shift and go to state 4
    BOOL            shift and go to state 10
    STRING          shift and go to state 11
    INT             shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    NOT             shift and go to state 15

    params                         shift and go to state 88
    exp                            shift and go to state 43

state 76

    (17) l_comma -> COMMA .

    IDENTIFIER      reduce using rule 17 (l_comma -> COMMA .)
    LROUND          reduce using rule 17 (l_comma -> COMMA .)
    BOOL            reduce using rule 17 (l_comma -> COMMA .)
    STRING          reduce using rule 17 (l_comma -> COMMA .)
    INT             reduce using rule 17 (l_comma -> COMMA .)
    DOUBLE          reduce using rule 17 (l_comma -> COMMA .)
    CHAR            reduce using rule 17 (l_comma -> COMMA .)
    NOT             reduce using rule 17 (l_comma -> COMMA .)
    RSQBRAC         reduce using rule 17 (l_comma -> COMMA .)


state 77

    (49) exp -> LROUND exp PLUS exp . RROUND
    (48) exp -> exp PLUS exp .
    (48) exp -> exp . PLUS exp
    (50) exp -> exp . MINUS exp
    (51) exp -> exp . MULTIPLY exp
    (52) exp -> exp . DIVIDE exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (56) exp -> exp . LESSTHAN exp
    (57) exp -> exp . GREATERTHAN exp
    (58) exp -> exp . LESSEQUAL exp
    (59) exp -> exp . GREATEREQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . POW exp

    RROUND          reduce using rule 48 (exp -> exp PLUS exp .)
    PLUS            reduce using rule 48 (exp -> exp PLUS exp .)
    MINUS           reduce using rule 48 (exp -> exp PLUS exp .)
    AND             reduce using rule 48 (exp -> exp PLUS exp .)
    OR              reduce using rule 48 (exp -> exp PLUS exp .)
    LESSTHAN        reduce using rule 48 (exp -> exp PLUS exp .)
    GREATERTHAN     reduce using rule 48 (exp -> exp PLUS exp .)
    LESSEQUAL       reduce using rule 48 (exp -> exp PLUS exp .)
    GREATEREQUAL    reduce using rule 48 (exp -> exp PLUS exp .)
    NOTEQUAL        reduce using rule 48 (exp -> exp PLUS exp .)
    EQUALS          reduce using rule 48 (exp -> exp PLUS exp .)
    POW             reduce using rule 48 (exp -> exp PLUS exp .)
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29

  ! RROUND          [ shift and go to state 89 ]
  ! MULTIPLY        [ reduce using rule 48 (exp -> exp PLUS exp .) ]
  ! DIVIDE          [ reduce using rule 48 (exp -> exp PLUS exp .) ]
  ! PLUS            [ shift and go to state 26 ]
  ! MINUS           [ shift and go to state 27 ]
  ! AND             [ shift and go to state 30 ]
  ! OR              [ shift and go to state 31 ]
  ! LESSTHAN        [ shift and go to state 32 ]
  ! GREATERTHAN     [ shift and go to state 33 ]
  ! LESSEQUAL       [ shift and go to state 34 ]
  ! GREATEREQUAL    [ shift and go to state 35 ]
  ! NOTEQUAL        [ shift and go to state 36 ]
  ! EQUALS          [ shift and go to state 37 ]
  ! POW             [ shift and go to state 38 ]


state 78

    (11) else -> ELSE c_stmt .

    ELSE            reduce using rule 11 (else -> ELSE c_stmt .)
    SEMICOLON       reduce using rule 11 (else -> ELSE c_stmt .)
    ELSEIF          reduce using rule 11 (else -> ELSE c_stmt .)
    RCURLY          reduce using rule 11 (else -> ELSE c_stmt .)


state 79

    (8) elseif -> ELSEIF c_exp c_stmt . elseif
    (8) elseif -> . ELSEIF c_exp c_stmt elseif
    (10) elseif -> .

  ! shift/reduce conflict for ELSEIF resolved as shift
    ELSEIF          shift and go to state 21
    ELSE            reduce using rule 10 (elseif -> .)
    SEMICOLON       reduce using rule 10 (elseif -> .)
    RCURLY          reduce using rule 10 (elseif -> .)

  ! ELSEIF          [ reduce using rule 10 (elseif -> .) ]

    elseif                         shift and go to state 90

state 80

    (16) stmt -> TYPE IDENTIFIER ASSIGN LSQBRAC . listparams RSQBRAC
    (19) listparams -> . INT l_comma listparams
    (20) listparams -> . DOUBLE l_comma listparams
    (21) listparams -> . STRING l_comma listparams
    (22) listparams -> . CHAR l_comma listparams
    (23) listparams -> . BOOL l_comma listparams
    (24) listparams -> .

    INT             shift and go to state 92
    DOUBLE          shift and go to state 93
    STRING          shift and go to state 94
    CHAR            shift and go to state 95
    BOOL            shift and go to state 96
    RSQBRAC         reduce using rule 24 (listparams -> .)

    listparams                     shift and go to state 91

state 81

    (39) stmt -> TYPE IDENTIFIER ASSIGN exp .
    (48) exp -> exp . PLUS exp
    (50) exp -> exp . MINUS exp
    (51) exp -> exp . MULTIPLY exp
    (52) exp -> exp . DIVIDE exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (56) exp -> exp . LESSTHAN exp
    (57) exp -> exp . GREATERTHAN exp
    (58) exp -> exp . LESSEQUAL exp
    (59) exp -> exp . GREATEREQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . POW exp

    SEMICOLON       reduce using rule 39 (stmt -> TYPE IDENTIFIER ASSIGN exp .)
    ELSE            reduce using rule 39 (stmt -> TYPE IDENTIFIER ASSIGN exp .)
    ELSEIF          reduce using rule 39 (stmt -> TYPE IDENTIFIER ASSIGN exp .)
    RCURLY          reduce using rule 39 (stmt -> TYPE IDENTIFIER ASSIGN exp .)
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    AND             shift and go to state 30
    OR              shift and go to state 31
    LESSTHAN        shift and go to state 32
    GREATERTHAN     shift and go to state 33
    LESSEQUAL       shift and go to state 34
    GREATEREQUAL    shift and go to state 35
    NOTEQUAL        shift and go to state 36
    EQUALS          shift and go to state 37
    POW             shift and go to state 38


state 82

    (25) exp -> IDENTIFIER LSQBRAC optparams RSQBRAC .

    PLUS            reduce using rule 25 (exp -> IDENTIFIER LSQBRAC optparams RSQBRAC .)
    MINUS           reduce using rule 25 (exp -> IDENTIFIER LSQBRAC optparams RSQBRAC .)
    MULTIPLY        reduce using rule 25 (exp -> IDENTIFIER LSQBRAC optparams RSQBRAC .)
    DIVIDE          reduce using rule 25 (exp -> IDENTIFIER LSQBRAC optparams RSQBRAC .)
    AND             reduce using rule 25 (exp -> IDENTIFIER LSQBRAC optparams RSQBRAC .)
    OR              reduce using rule 25 (exp -> IDENTIFIER LSQBRAC optparams RSQBRAC .)
    LESSTHAN        reduce using rule 25 (exp -> IDENTIFIER LSQBRAC optparams RSQBRAC .)
    GREATERTHAN     reduce using rule 25 (exp -> IDENTIFIER LSQBRAC optparams RSQBRAC .)
    LESSEQUAL       reduce using rule 25 (exp -> IDENTIFIER LSQBRAC optparams RSQBRAC .)
    GREATEREQUAL    reduce using rule 25 (exp -> IDENTIFIER LSQBRAC optparams RSQBRAC .)
    NOTEQUAL        reduce using rule 25 (exp -> IDENTIFIER LSQBRAC optparams RSQBRAC .)
    EQUALS          reduce using rule 25 (exp -> IDENTIFIER LSQBRAC optparams RSQBRAC .)
    POW             reduce using rule 25 (exp -> IDENTIFIER LSQBRAC optparams RSQBRAC .)
    SEMICOLON       reduce using rule 25 (exp -> IDENTIFIER LSQBRAC optparams RSQBRAC .)
    RROUND          reduce using rule 25 (exp -> IDENTIFIER LSQBRAC optparams RSQBRAC .)
    LCURLY          reduce using rule 25 (exp -> IDENTIFIER LSQBRAC optparams RSQBRAC .)
    DISPLAY         reduce using rule 25 (exp -> IDENTIFIER LSQBRAC optparams RSQBRAC .)
    TYPE            reduce using rule 25 (exp -> IDENTIFIER LSQBRAC optparams RSQBRAC .)
    IDENTIFIER      reduce using rule 25 (exp -> IDENTIFIER LSQBRAC optparams RSQBRAC .)
    IF              reduce using rule 25 (exp -> IDENTIFIER LSQBRAC optparams RSQBRAC .)
    LROUND          reduce using rule 25 (exp -> IDENTIFIER LSQBRAC optparams RSQBRAC .)
    BOOL            reduce using rule 25 (exp -> IDENTIFIER LSQBRAC optparams RSQBRAC .)
    STRING          reduce using rule 25 (exp -> IDENTIFIER LSQBRAC optparams RSQBRAC .)
    INT             reduce using rule 25 (exp -> IDENTIFIER LSQBRAC optparams RSQBRAC .)
    DOUBLE          reduce using rule 25 (exp -> IDENTIFIER LSQBRAC optparams RSQBRAC .)
    CHAR            reduce using rule 25 (exp -> IDENTIFIER LSQBRAC optparams RSQBRAC .)
    NOT             reduce using rule 25 (exp -> IDENTIFIER LSQBRAC optparams RSQBRAC .)
    ELSEIF          reduce using rule 25 (exp -> IDENTIFIER LSQBRAC optparams RSQBRAC .)
    ELSE            reduce using rule 25 (exp -> IDENTIFIER LSQBRAC optparams RSQBRAC .)
    RCURLY          reduce using rule 25 (exp -> IDENTIFIER LSQBRAC optparams RSQBRAC .)
    COMMA           reduce using rule 25 (exp -> IDENTIFIER LSQBRAC optparams RSQBRAC .)
    RSQBRAC         reduce using rule 25 (exp -> IDENTIFIER LSQBRAC optparams RSQBRAC .)


state 83

    (27) list_functions -> PUSH LROUND . pparams RROUND
    (35) pparams -> . exp
    (36) pparams -> .
    (25) exp -> . IDENTIFIER LSQBRAC optparams RSQBRAC
    (26) exp -> . IDENTIFIER DOT list_functions
    (41) exp -> . LROUND exp RROUND
    (42) exp -> . BOOL
    (43) exp -> . IDENTIFIER
    (44) exp -> . STRING
    (45) exp -> . INT
    (46) exp -> . DOUBLE
    (47) exp -> . CHAR
    (48) exp -> . exp PLUS exp
    (49) exp -> . LROUND exp PLUS exp RROUND
    (50) exp -> . exp MINUS exp
    (51) exp -> . exp MULTIPLY exp
    (52) exp -> . exp DIVIDE exp
    (53) exp -> . NOT exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . exp LESSTHAN exp
    (57) exp -> . exp GREATERTHAN exp
    (58) exp -> . exp LESSEQUAL exp
    (59) exp -> . exp GREATEREQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp POW exp

    RROUND          reduce using rule 36 (pparams -> .)
    IDENTIFIER      shift and go to state 19
    LROUND          shift and go to state 4
    BOOL            shift and go to state 10
    STRING          shift and go to state 11
    INT             shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    NOT             shift and go to state 15

    pparams                        shift and go to state 97
    exp                            shift and go to state 98

state 84

    (28) list_functions -> POP LROUND . pparams RROUND
    (35) pparams -> . exp
    (36) pparams -> .
    (25) exp -> . IDENTIFIER LSQBRAC optparams RSQBRAC
    (26) exp -> . IDENTIFIER DOT list_functions
    (41) exp -> . LROUND exp RROUND
    (42) exp -> . BOOL
    (43) exp -> . IDENTIFIER
    (44) exp -> . STRING
    (45) exp -> . INT
    (46) exp -> . DOUBLE
    (47) exp -> . CHAR
    (48) exp -> . exp PLUS exp
    (49) exp -> . LROUND exp PLUS exp RROUND
    (50) exp -> . exp MINUS exp
    (51) exp -> . exp MULTIPLY exp
    (52) exp -> . exp DIVIDE exp
    (53) exp -> . NOT exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . exp LESSTHAN exp
    (57) exp -> . exp GREATERTHAN exp
    (58) exp -> . exp LESSEQUAL exp
    (59) exp -> . exp GREATEREQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp POW exp

    RROUND          reduce using rule 36 (pparams -> .)
    IDENTIFIER      shift and go to state 19
    LROUND          shift and go to state 4
    BOOL            shift and go to state 10
    STRING          shift and go to state 11
    INT             shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    NOT             shift and go to state 15

    pparams                        shift and go to state 99
    exp                            shift and go to state 98

state 85

    (29) list_functions -> SLICE LROUND . sliceparams RROUND
    (32) sliceparams -> . INT
    (33) sliceparams -> . INT COMMA INT
    (34) sliceparams -> .

    INT             shift and go to state 101
    RROUND          reduce using rule 34 (sliceparams -> .)

    sliceparams                    shift and go to state 100

state 86

    (30) list_functions -> INDEX LROUND . indexparams RROUND
    (31) indexparams -> . exp
    (25) exp -> . IDENTIFIER LSQBRAC optparams RSQBRAC
    (26) exp -> . IDENTIFIER DOT list_functions
    (41) exp -> . LROUND exp RROUND
    (42) exp -> . BOOL
    (43) exp -> . IDENTIFIER
    (44) exp -> . STRING
    (45) exp -> . INT
    (46) exp -> . DOUBLE
    (47) exp -> . CHAR
    (48) exp -> . exp PLUS exp
    (49) exp -> . LROUND exp PLUS exp RROUND
    (50) exp -> . exp MINUS exp
    (51) exp -> . exp MULTIPLY exp
    (52) exp -> . exp DIVIDE exp
    (53) exp -> . NOT exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . exp LESSTHAN exp
    (57) exp -> . exp GREATERTHAN exp
    (58) exp -> . exp LESSEQUAL exp
    (59) exp -> . exp GREATEREQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp POW exp

    IDENTIFIER      shift and go to state 19
    LROUND          shift and go to state 4
    BOOL            shift and go to state 10
    STRING          shift and go to state 11
    INT             shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    NOT             shift and go to state 15

    indexparams                    shift and go to state 102
    exp                            shift and go to state 103

state 87

    (13) c_stmt -> LCURLY c_stmt . RCURLY

    RCURLY          shift and go to state 104


state 88

    (3) optparams -> params l_comma params .

    RROUND          reduce using rule 3 (optparams -> params l_comma params .)
    RSQBRAC         reduce using rule 3 (optparams -> params l_comma params .)


state 89

    (49) exp -> LROUND exp PLUS exp RROUND .

    PLUS            reduce using rule 49 (exp -> LROUND exp PLUS exp RROUND .)
    MINUS           reduce using rule 49 (exp -> LROUND exp PLUS exp RROUND .)
    MULTIPLY        reduce using rule 49 (exp -> LROUND exp PLUS exp RROUND .)
    DIVIDE          reduce using rule 49 (exp -> LROUND exp PLUS exp RROUND .)
    AND             reduce using rule 49 (exp -> LROUND exp PLUS exp RROUND .)
    OR              reduce using rule 49 (exp -> LROUND exp PLUS exp RROUND .)
    LESSTHAN        reduce using rule 49 (exp -> LROUND exp PLUS exp RROUND .)
    GREATERTHAN     reduce using rule 49 (exp -> LROUND exp PLUS exp RROUND .)
    LESSEQUAL       reduce using rule 49 (exp -> LROUND exp PLUS exp RROUND .)
    GREATEREQUAL    reduce using rule 49 (exp -> LROUND exp PLUS exp RROUND .)
    NOTEQUAL        reduce using rule 49 (exp -> LROUND exp PLUS exp RROUND .)
    EQUALS          reduce using rule 49 (exp -> LROUND exp PLUS exp RROUND .)
    POW             reduce using rule 49 (exp -> LROUND exp PLUS exp RROUND .)
    SEMICOLON       reduce using rule 49 (exp -> LROUND exp PLUS exp RROUND .)
    RROUND          reduce using rule 49 (exp -> LROUND exp PLUS exp RROUND .)
    LCURLY          reduce using rule 49 (exp -> LROUND exp PLUS exp RROUND .)
    DISPLAY         reduce using rule 49 (exp -> LROUND exp PLUS exp RROUND .)
    TYPE            reduce using rule 49 (exp -> LROUND exp PLUS exp RROUND .)
    IDENTIFIER      reduce using rule 49 (exp -> LROUND exp PLUS exp RROUND .)
    IF              reduce using rule 49 (exp -> LROUND exp PLUS exp RROUND .)
    LROUND          reduce using rule 49 (exp -> LROUND exp PLUS exp RROUND .)
    BOOL            reduce using rule 49 (exp -> LROUND exp PLUS exp RROUND .)
    STRING          reduce using rule 49 (exp -> LROUND exp PLUS exp RROUND .)
    INT             reduce using rule 49 (exp -> LROUND exp PLUS exp RROUND .)
    DOUBLE          reduce using rule 49 (exp -> LROUND exp PLUS exp RROUND .)
    CHAR            reduce using rule 49 (exp -> LROUND exp PLUS exp RROUND .)
    NOT             reduce using rule 49 (exp -> LROUND exp PLUS exp RROUND .)
    ELSEIF          reduce using rule 49 (exp -> LROUND exp PLUS exp RROUND .)
    ELSE            reduce using rule 49 (exp -> LROUND exp PLUS exp RROUND .)
    RCURLY          reduce using rule 49 (exp -> LROUND exp PLUS exp RROUND .)
    COMMA           reduce using rule 49 (exp -> LROUND exp PLUS exp RROUND .)
    RSQBRAC         reduce using rule 49 (exp -> LROUND exp PLUS exp RROUND .)


state 90

    (8) elseif -> ELSEIF c_exp c_stmt elseif .

    ELSE            reduce using rule 8 (elseif -> ELSEIF c_exp c_stmt elseif .)
    SEMICOLON       reduce using rule 8 (elseif -> ELSEIF c_exp c_stmt elseif .)
    ELSEIF          reduce using rule 8 (elseif -> ELSEIF c_exp c_stmt elseif .)
    RCURLY          reduce using rule 8 (elseif -> ELSEIF c_exp c_stmt elseif .)


state 91

    (16) stmt -> TYPE IDENTIFIER ASSIGN LSQBRAC listparams . RSQBRAC

    RSQBRAC         shift and go to state 105


state 92

    (19) listparams -> INT . l_comma listparams
    (17) l_comma -> . COMMA
    (18) l_comma -> .

    COMMA           shift and go to state 76
    INT             reduce using rule 18 (l_comma -> .)
    DOUBLE          reduce using rule 18 (l_comma -> .)
    STRING          reduce using rule 18 (l_comma -> .)
    CHAR            reduce using rule 18 (l_comma -> .)
    BOOL            reduce using rule 18 (l_comma -> .)
    RSQBRAC         reduce using rule 18 (l_comma -> .)

    l_comma                        shift and go to state 106

state 93

    (20) listparams -> DOUBLE . l_comma listparams
    (17) l_comma -> . COMMA
    (18) l_comma -> .

    COMMA           shift and go to state 76
    INT             reduce using rule 18 (l_comma -> .)
    DOUBLE          reduce using rule 18 (l_comma -> .)
    STRING          reduce using rule 18 (l_comma -> .)
    CHAR            reduce using rule 18 (l_comma -> .)
    BOOL            reduce using rule 18 (l_comma -> .)
    RSQBRAC         reduce using rule 18 (l_comma -> .)

    l_comma                        shift and go to state 107

state 94

    (21) listparams -> STRING . l_comma listparams
    (17) l_comma -> . COMMA
    (18) l_comma -> .

    COMMA           shift and go to state 76
    INT             reduce using rule 18 (l_comma -> .)
    DOUBLE          reduce using rule 18 (l_comma -> .)
    STRING          reduce using rule 18 (l_comma -> .)
    CHAR            reduce using rule 18 (l_comma -> .)
    BOOL            reduce using rule 18 (l_comma -> .)
    RSQBRAC         reduce using rule 18 (l_comma -> .)

    l_comma                        shift and go to state 108

state 95

    (22) listparams -> CHAR . l_comma listparams
    (17) l_comma -> . COMMA
    (18) l_comma -> .

    COMMA           shift and go to state 76
    INT             reduce using rule 18 (l_comma -> .)
    DOUBLE          reduce using rule 18 (l_comma -> .)
    STRING          reduce using rule 18 (l_comma -> .)
    CHAR            reduce using rule 18 (l_comma -> .)
    BOOL            reduce using rule 18 (l_comma -> .)
    RSQBRAC         reduce using rule 18 (l_comma -> .)

    l_comma                        shift and go to state 109

state 96

    (23) listparams -> BOOL . l_comma listparams
    (17) l_comma -> . COMMA
    (18) l_comma -> .

    COMMA           shift and go to state 76
    INT             reduce using rule 18 (l_comma -> .)
    DOUBLE          reduce using rule 18 (l_comma -> .)
    STRING          reduce using rule 18 (l_comma -> .)
    CHAR            reduce using rule 18 (l_comma -> .)
    BOOL            reduce using rule 18 (l_comma -> .)
    RSQBRAC         reduce using rule 18 (l_comma -> .)

    l_comma                        shift and go to state 110

state 97

    (27) list_functions -> PUSH LROUND pparams . RROUND

    RROUND          shift and go to state 111


state 98

    (35) pparams -> exp .
    (48) exp -> exp . PLUS exp
    (50) exp -> exp . MINUS exp
    (51) exp -> exp . MULTIPLY exp
    (52) exp -> exp . DIVIDE exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (56) exp -> exp . LESSTHAN exp
    (57) exp -> exp . GREATERTHAN exp
    (58) exp -> exp . LESSEQUAL exp
    (59) exp -> exp . GREATEREQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . POW exp

    RROUND          reduce using rule 35 (pparams -> exp .)
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    AND             shift and go to state 30
    OR              shift and go to state 31
    LESSTHAN        shift and go to state 32
    GREATERTHAN     shift and go to state 33
    LESSEQUAL       shift and go to state 34
    GREATEREQUAL    shift and go to state 35
    NOTEQUAL        shift and go to state 36
    EQUALS          shift and go to state 37
    POW             shift and go to state 38


state 99

    (28) list_functions -> POP LROUND pparams . RROUND

    RROUND          shift and go to state 112


state 100

    (29) list_functions -> SLICE LROUND sliceparams . RROUND

    RROUND          shift and go to state 113


state 101

    (32) sliceparams -> INT .
    (33) sliceparams -> INT . COMMA INT

    RROUND          reduce using rule 32 (sliceparams -> INT .)
    COMMA           shift and go to state 114


state 102

    (30) list_functions -> INDEX LROUND indexparams . RROUND

    RROUND          shift and go to state 115


state 103

    (31) indexparams -> exp .
    (48) exp -> exp . PLUS exp
    (50) exp -> exp . MINUS exp
    (51) exp -> exp . MULTIPLY exp
    (52) exp -> exp . DIVIDE exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (56) exp -> exp . LESSTHAN exp
    (57) exp -> exp . GREATERTHAN exp
    (58) exp -> exp . LESSEQUAL exp
    (59) exp -> exp . GREATEREQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . POW exp

    RROUND          reduce using rule 31 (indexparams -> exp .)
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    AND             shift and go to state 30
    OR              shift and go to state 31
    LESSTHAN        shift and go to state 32
    GREATERTHAN     shift and go to state 33
    LESSEQUAL       shift and go to state 34
    GREATEREQUAL    shift and go to state 35
    NOTEQUAL        shift and go to state 36
    EQUALS          shift and go to state 37
    POW             shift and go to state 38


state 104

    (13) c_stmt -> LCURLY c_stmt RCURLY .

    ELSE            reduce using rule 13 (c_stmt -> LCURLY c_stmt RCURLY .)
    SEMICOLON       reduce using rule 13 (c_stmt -> LCURLY c_stmt RCURLY .)
    ELSEIF          reduce using rule 13 (c_stmt -> LCURLY c_stmt RCURLY .)
    RCURLY          reduce using rule 13 (c_stmt -> LCURLY c_stmt RCURLY .)


state 105

    (16) stmt -> TYPE IDENTIFIER ASSIGN LSQBRAC listparams RSQBRAC .

    SEMICOLON       reduce using rule 16 (stmt -> TYPE IDENTIFIER ASSIGN LSQBRAC listparams RSQBRAC .)
    ELSE            reduce using rule 16 (stmt -> TYPE IDENTIFIER ASSIGN LSQBRAC listparams RSQBRAC .)
    ELSEIF          reduce using rule 16 (stmt -> TYPE IDENTIFIER ASSIGN LSQBRAC listparams RSQBRAC .)
    RCURLY          reduce using rule 16 (stmt -> TYPE IDENTIFIER ASSIGN LSQBRAC listparams RSQBRAC .)


state 106

    (19) listparams -> INT l_comma . listparams
    (19) listparams -> . INT l_comma listparams
    (20) listparams -> . DOUBLE l_comma listparams
    (21) listparams -> . STRING l_comma listparams
    (22) listparams -> . CHAR l_comma listparams
    (23) listparams -> . BOOL l_comma listparams
    (24) listparams -> .

    INT             shift and go to state 92
    DOUBLE          shift and go to state 93
    STRING          shift and go to state 94
    CHAR            shift and go to state 95
    BOOL            shift and go to state 96
    RSQBRAC         reduce using rule 24 (listparams -> .)

    listparams                     shift and go to state 116

state 107

    (20) listparams -> DOUBLE l_comma . listparams
    (19) listparams -> . INT l_comma listparams
    (20) listparams -> . DOUBLE l_comma listparams
    (21) listparams -> . STRING l_comma listparams
    (22) listparams -> . CHAR l_comma listparams
    (23) listparams -> . BOOL l_comma listparams
    (24) listparams -> .

    INT             shift and go to state 92
    DOUBLE          shift and go to state 93
    STRING          shift and go to state 94
    CHAR            shift and go to state 95
    BOOL            shift and go to state 96
    RSQBRAC         reduce using rule 24 (listparams -> .)

    listparams                     shift and go to state 117

state 108

    (21) listparams -> STRING l_comma . listparams
    (19) listparams -> . INT l_comma listparams
    (20) listparams -> . DOUBLE l_comma listparams
    (21) listparams -> . STRING l_comma listparams
    (22) listparams -> . CHAR l_comma listparams
    (23) listparams -> . BOOL l_comma listparams
    (24) listparams -> .

    INT             shift and go to state 92
    DOUBLE          shift and go to state 93
    STRING          shift and go to state 94
    CHAR            shift and go to state 95
    BOOL            shift and go to state 96
    RSQBRAC         reduce using rule 24 (listparams -> .)

    listparams                     shift and go to state 118

state 109

    (22) listparams -> CHAR l_comma . listparams
    (19) listparams -> . INT l_comma listparams
    (20) listparams -> . DOUBLE l_comma listparams
    (21) listparams -> . STRING l_comma listparams
    (22) listparams -> . CHAR l_comma listparams
    (23) listparams -> . BOOL l_comma listparams
    (24) listparams -> .

    INT             shift and go to state 92
    DOUBLE          shift and go to state 93
    STRING          shift and go to state 94
    CHAR            shift and go to state 95
    BOOL            shift and go to state 96
    RSQBRAC         reduce using rule 24 (listparams -> .)

    listparams                     shift and go to state 119

state 110

    (23) listparams -> BOOL l_comma . listparams
    (19) listparams -> . INT l_comma listparams
    (20) listparams -> . DOUBLE l_comma listparams
    (21) listparams -> . STRING l_comma listparams
    (22) listparams -> . CHAR l_comma listparams
    (23) listparams -> . BOOL l_comma listparams
    (24) listparams -> .

    INT             shift and go to state 92
    DOUBLE          shift and go to state 93
    STRING          shift and go to state 94
    CHAR            shift and go to state 95
    BOOL            shift and go to state 96
    RSQBRAC         reduce using rule 24 (listparams -> .)

    listparams                     shift and go to state 120

state 111

    (27) list_functions -> PUSH LROUND pparams RROUND .

    PLUS            reduce using rule 27 (list_functions -> PUSH LROUND pparams RROUND .)
    MINUS           reduce using rule 27 (list_functions -> PUSH LROUND pparams RROUND .)
    MULTIPLY        reduce using rule 27 (list_functions -> PUSH LROUND pparams RROUND .)
    DIVIDE          reduce using rule 27 (list_functions -> PUSH LROUND pparams RROUND .)
    AND             reduce using rule 27 (list_functions -> PUSH LROUND pparams RROUND .)
    OR              reduce using rule 27 (list_functions -> PUSH LROUND pparams RROUND .)
    LESSTHAN        reduce using rule 27 (list_functions -> PUSH LROUND pparams RROUND .)
    GREATERTHAN     reduce using rule 27 (list_functions -> PUSH LROUND pparams RROUND .)
    LESSEQUAL       reduce using rule 27 (list_functions -> PUSH LROUND pparams RROUND .)
    GREATEREQUAL    reduce using rule 27 (list_functions -> PUSH LROUND pparams RROUND .)
    NOTEQUAL        reduce using rule 27 (list_functions -> PUSH LROUND pparams RROUND .)
    EQUALS          reduce using rule 27 (list_functions -> PUSH LROUND pparams RROUND .)
    POW             reduce using rule 27 (list_functions -> PUSH LROUND pparams RROUND .)
    SEMICOLON       reduce using rule 27 (list_functions -> PUSH LROUND pparams RROUND .)
    RROUND          reduce using rule 27 (list_functions -> PUSH LROUND pparams RROUND .)
    LCURLY          reduce using rule 27 (list_functions -> PUSH LROUND pparams RROUND .)
    DISPLAY         reduce using rule 27 (list_functions -> PUSH LROUND pparams RROUND .)
    TYPE            reduce using rule 27 (list_functions -> PUSH LROUND pparams RROUND .)
    IDENTIFIER      reduce using rule 27 (list_functions -> PUSH LROUND pparams RROUND .)
    IF              reduce using rule 27 (list_functions -> PUSH LROUND pparams RROUND .)
    LROUND          reduce using rule 27 (list_functions -> PUSH LROUND pparams RROUND .)
    BOOL            reduce using rule 27 (list_functions -> PUSH LROUND pparams RROUND .)
    STRING          reduce using rule 27 (list_functions -> PUSH LROUND pparams RROUND .)
    INT             reduce using rule 27 (list_functions -> PUSH LROUND pparams RROUND .)
    DOUBLE          reduce using rule 27 (list_functions -> PUSH LROUND pparams RROUND .)
    CHAR            reduce using rule 27 (list_functions -> PUSH LROUND pparams RROUND .)
    NOT             reduce using rule 27 (list_functions -> PUSH LROUND pparams RROUND .)
    ELSEIF          reduce using rule 27 (list_functions -> PUSH LROUND pparams RROUND .)
    ELSE            reduce using rule 27 (list_functions -> PUSH LROUND pparams RROUND .)
    RCURLY          reduce using rule 27 (list_functions -> PUSH LROUND pparams RROUND .)
    COMMA           reduce using rule 27 (list_functions -> PUSH LROUND pparams RROUND .)
    RSQBRAC         reduce using rule 27 (list_functions -> PUSH LROUND pparams RROUND .)


state 112

    (28) list_functions -> POP LROUND pparams RROUND .

    PLUS            reduce using rule 28 (list_functions -> POP LROUND pparams RROUND .)
    MINUS           reduce using rule 28 (list_functions -> POP LROUND pparams RROUND .)
    MULTIPLY        reduce using rule 28 (list_functions -> POP LROUND pparams RROUND .)
    DIVIDE          reduce using rule 28 (list_functions -> POP LROUND pparams RROUND .)
    AND             reduce using rule 28 (list_functions -> POP LROUND pparams RROUND .)
    OR              reduce using rule 28 (list_functions -> POP LROUND pparams RROUND .)
    LESSTHAN        reduce using rule 28 (list_functions -> POP LROUND pparams RROUND .)
    GREATERTHAN     reduce using rule 28 (list_functions -> POP LROUND pparams RROUND .)
    LESSEQUAL       reduce using rule 28 (list_functions -> POP LROUND pparams RROUND .)
    GREATEREQUAL    reduce using rule 28 (list_functions -> POP LROUND pparams RROUND .)
    NOTEQUAL        reduce using rule 28 (list_functions -> POP LROUND pparams RROUND .)
    EQUALS          reduce using rule 28 (list_functions -> POP LROUND pparams RROUND .)
    POW             reduce using rule 28 (list_functions -> POP LROUND pparams RROUND .)
    SEMICOLON       reduce using rule 28 (list_functions -> POP LROUND pparams RROUND .)
    RROUND          reduce using rule 28 (list_functions -> POP LROUND pparams RROUND .)
    LCURLY          reduce using rule 28 (list_functions -> POP LROUND pparams RROUND .)
    DISPLAY         reduce using rule 28 (list_functions -> POP LROUND pparams RROUND .)
    TYPE            reduce using rule 28 (list_functions -> POP LROUND pparams RROUND .)
    IDENTIFIER      reduce using rule 28 (list_functions -> POP LROUND pparams RROUND .)
    IF              reduce using rule 28 (list_functions -> POP LROUND pparams RROUND .)
    LROUND          reduce using rule 28 (list_functions -> POP LROUND pparams RROUND .)
    BOOL            reduce using rule 28 (list_functions -> POP LROUND pparams RROUND .)
    STRING          reduce using rule 28 (list_functions -> POP LROUND pparams RROUND .)
    INT             reduce using rule 28 (list_functions -> POP LROUND pparams RROUND .)
    DOUBLE          reduce using rule 28 (list_functions -> POP LROUND pparams RROUND .)
    CHAR            reduce using rule 28 (list_functions -> POP LROUND pparams RROUND .)
    NOT             reduce using rule 28 (list_functions -> POP LROUND pparams RROUND .)
    ELSEIF          reduce using rule 28 (list_functions -> POP LROUND pparams RROUND .)
    ELSE            reduce using rule 28 (list_functions -> POP LROUND pparams RROUND .)
    RCURLY          reduce using rule 28 (list_functions -> POP LROUND pparams RROUND .)
    COMMA           reduce using rule 28 (list_functions -> POP LROUND pparams RROUND .)
    RSQBRAC         reduce using rule 28 (list_functions -> POP LROUND pparams RROUND .)


state 113

    (29) list_functions -> SLICE LROUND sliceparams RROUND .

    PLUS            reduce using rule 29 (list_functions -> SLICE LROUND sliceparams RROUND .)
    MINUS           reduce using rule 29 (list_functions -> SLICE LROUND sliceparams RROUND .)
    MULTIPLY        reduce using rule 29 (list_functions -> SLICE LROUND sliceparams RROUND .)
    DIVIDE          reduce using rule 29 (list_functions -> SLICE LROUND sliceparams RROUND .)
    AND             reduce using rule 29 (list_functions -> SLICE LROUND sliceparams RROUND .)
    OR              reduce using rule 29 (list_functions -> SLICE LROUND sliceparams RROUND .)
    LESSTHAN        reduce using rule 29 (list_functions -> SLICE LROUND sliceparams RROUND .)
    GREATERTHAN     reduce using rule 29 (list_functions -> SLICE LROUND sliceparams RROUND .)
    LESSEQUAL       reduce using rule 29 (list_functions -> SLICE LROUND sliceparams RROUND .)
    GREATEREQUAL    reduce using rule 29 (list_functions -> SLICE LROUND sliceparams RROUND .)
    NOTEQUAL        reduce using rule 29 (list_functions -> SLICE LROUND sliceparams RROUND .)
    EQUALS          reduce using rule 29 (list_functions -> SLICE LROUND sliceparams RROUND .)
    POW             reduce using rule 29 (list_functions -> SLICE LROUND sliceparams RROUND .)
    SEMICOLON       reduce using rule 29 (list_functions -> SLICE LROUND sliceparams RROUND .)
    RROUND          reduce using rule 29 (list_functions -> SLICE LROUND sliceparams RROUND .)
    LCURLY          reduce using rule 29 (list_functions -> SLICE LROUND sliceparams RROUND .)
    DISPLAY         reduce using rule 29 (list_functions -> SLICE LROUND sliceparams RROUND .)
    TYPE            reduce using rule 29 (list_functions -> SLICE LROUND sliceparams RROUND .)
    IDENTIFIER      reduce using rule 29 (list_functions -> SLICE LROUND sliceparams RROUND .)
    IF              reduce using rule 29 (list_functions -> SLICE LROUND sliceparams RROUND .)
    LROUND          reduce using rule 29 (list_functions -> SLICE LROUND sliceparams RROUND .)
    BOOL            reduce using rule 29 (list_functions -> SLICE LROUND sliceparams RROUND .)
    STRING          reduce using rule 29 (list_functions -> SLICE LROUND sliceparams RROUND .)
    INT             reduce using rule 29 (list_functions -> SLICE LROUND sliceparams RROUND .)
    DOUBLE          reduce using rule 29 (list_functions -> SLICE LROUND sliceparams RROUND .)
    CHAR            reduce using rule 29 (list_functions -> SLICE LROUND sliceparams RROUND .)
    NOT             reduce using rule 29 (list_functions -> SLICE LROUND sliceparams RROUND .)
    ELSEIF          reduce using rule 29 (list_functions -> SLICE LROUND sliceparams RROUND .)
    ELSE            reduce using rule 29 (list_functions -> SLICE LROUND sliceparams RROUND .)
    RCURLY          reduce using rule 29 (list_functions -> SLICE LROUND sliceparams RROUND .)
    COMMA           reduce using rule 29 (list_functions -> SLICE LROUND sliceparams RROUND .)
    RSQBRAC         reduce using rule 29 (list_functions -> SLICE LROUND sliceparams RROUND .)


state 114

    (33) sliceparams -> INT COMMA . INT

    INT             shift and go to state 121


state 115

    (30) list_functions -> INDEX LROUND indexparams RROUND .

    PLUS            reduce using rule 30 (list_functions -> INDEX LROUND indexparams RROUND .)
    MINUS           reduce using rule 30 (list_functions -> INDEX LROUND indexparams RROUND .)
    MULTIPLY        reduce using rule 30 (list_functions -> INDEX LROUND indexparams RROUND .)
    DIVIDE          reduce using rule 30 (list_functions -> INDEX LROUND indexparams RROUND .)
    AND             reduce using rule 30 (list_functions -> INDEX LROUND indexparams RROUND .)
    OR              reduce using rule 30 (list_functions -> INDEX LROUND indexparams RROUND .)
    LESSTHAN        reduce using rule 30 (list_functions -> INDEX LROUND indexparams RROUND .)
    GREATERTHAN     reduce using rule 30 (list_functions -> INDEX LROUND indexparams RROUND .)
    LESSEQUAL       reduce using rule 30 (list_functions -> INDEX LROUND indexparams RROUND .)
    GREATEREQUAL    reduce using rule 30 (list_functions -> INDEX LROUND indexparams RROUND .)
    NOTEQUAL        reduce using rule 30 (list_functions -> INDEX LROUND indexparams RROUND .)
    EQUALS          reduce using rule 30 (list_functions -> INDEX LROUND indexparams RROUND .)
    POW             reduce using rule 30 (list_functions -> INDEX LROUND indexparams RROUND .)
    SEMICOLON       reduce using rule 30 (list_functions -> INDEX LROUND indexparams RROUND .)
    RROUND          reduce using rule 30 (list_functions -> INDEX LROUND indexparams RROUND .)
    LCURLY          reduce using rule 30 (list_functions -> INDEX LROUND indexparams RROUND .)
    DISPLAY         reduce using rule 30 (list_functions -> INDEX LROUND indexparams RROUND .)
    TYPE            reduce using rule 30 (list_functions -> INDEX LROUND indexparams RROUND .)
    IDENTIFIER      reduce using rule 30 (list_functions -> INDEX LROUND indexparams RROUND .)
    IF              reduce using rule 30 (list_functions -> INDEX LROUND indexparams RROUND .)
    LROUND          reduce using rule 30 (list_functions -> INDEX LROUND indexparams RROUND .)
    BOOL            reduce using rule 30 (list_functions -> INDEX LROUND indexparams RROUND .)
    STRING          reduce using rule 30 (list_functions -> INDEX LROUND indexparams RROUND .)
    INT             reduce using rule 30 (list_functions -> INDEX LROUND indexparams RROUND .)
    DOUBLE          reduce using rule 30 (list_functions -> INDEX LROUND indexparams RROUND .)
    CHAR            reduce using rule 30 (list_functions -> INDEX LROUND indexparams RROUND .)
    NOT             reduce using rule 30 (list_functions -> INDEX LROUND indexparams RROUND .)
    ELSEIF          reduce using rule 30 (list_functions -> INDEX LROUND indexparams RROUND .)
    ELSE            reduce using rule 30 (list_functions -> INDEX LROUND indexparams RROUND .)
    RCURLY          reduce using rule 30 (list_functions -> INDEX LROUND indexparams RROUND .)
    COMMA           reduce using rule 30 (list_functions -> INDEX LROUND indexparams RROUND .)
    RSQBRAC         reduce using rule 30 (list_functions -> INDEX LROUND indexparams RROUND .)


state 116

    (19) listparams -> INT l_comma listparams .

    RSQBRAC         reduce using rule 19 (listparams -> INT l_comma listparams .)


state 117

    (20) listparams -> DOUBLE l_comma listparams .

    RSQBRAC         reduce using rule 20 (listparams -> DOUBLE l_comma listparams .)


state 118

    (21) listparams -> STRING l_comma listparams .

    RSQBRAC         reduce using rule 21 (listparams -> STRING l_comma listparams .)


state 119

    (22) listparams -> CHAR l_comma listparams .

    RSQBRAC         reduce using rule 22 (listparams -> CHAR l_comma listparams .)


state 120

    (23) listparams -> BOOL l_comma listparams .

    RSQBRAC         reduce using rule 23 (listparams -> BOOL l_comma listparams .)


state 121

    (33) sliceparams -> INT COMMA INT .

    RROUND          reduce using rule 33 (sliceparams -> INT COMMA INT .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSEIF in state 5 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 20 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 40 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 40 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 40 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 40 resolved as shift
WARNING: shift/reduce conflict for AND in state 40 resolved as shift
WARNING: shift/reduce conflict for OR in state 40 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 40 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 40 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 40 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUAL in state 40 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 40 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 40 resolved as shift
WARNING: shift/reduce conflict for POW in state 40 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 62 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 62 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 62 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 62 resolved as shift
WARNING: shift/reduce conflict for AND in state 62 resolved as shift
WARNING: shift/reduce conflict for OR in state 62 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 62 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 62 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 62 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUAL in state 62 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 62 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 62 resolved as shift
WARNING: shift/reduce conflict for POW in state 62 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 63 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 63 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 63 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 63 resolved as shift
WARNING: shift/reduce conflict for AND in state 63 resolved as shift
WARNING: shift/reduce conflict for OR in state 63 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 63 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 63 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 63 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUAL in state 63 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 63 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 63 resolved as shift
WARNING: shift/reduce conflict for POW in state 63 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 64 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 64 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 64 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 64 resolved as shift
WARNING: shift/reduce conflict for AND in state 64 resolved as shift
WARNING: shift/reduce conflict for OR in state 64 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 64 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 64 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 64 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUAL in state 64 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 64 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 64 resolved as shift
WARNING: shift/reduce conflict for POW in state 64 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 65 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 65 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 65 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 65 resolved as shift
WARNING: shift/reduce conflict for AND in state 65 resolved as shift
WARNING: shift/reduce conflict for OR in state 65 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 65 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 65 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 65 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUAL in state 65 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 65 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 65 resolved as shift
WARNING: shift/reduce conflict for POW in state 65 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 66 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 66 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 66 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 66 resolved as shift
WARNING: shift/reduce conflict for AND in state 66 resolved as shift
WARNING: shift/reduce conflict for OR in state 66 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 66 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 66 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 66 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUAL in state 66 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 66 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 66 resolved as shift
WARNING: shift/reduce conflict for POW in state 66 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 67 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 67 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 67 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 67 resolved as shift
WARNING: shift/reduce conflict for AND in state 67 resolved as shift
WARNING: shift/reduce conflict for OR in state 67 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 67 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 67 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 67 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUAL in state 67 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 67 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 67 resolved as shift
WARNING: shift/reduce conflict for POW in state 67 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 68 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 68 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 68 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 68 resolved as shift
WARNING: shift/reduce conflict for AND in state 68 resolved as shift
WARNING: shift/reduce conflict for OR in state 68 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 68 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 68 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 68 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUAL in state 68 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 68 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 68 resolved as shift
WARNING: shift/reduce conflict for POW in state 68 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 69 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 69 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 69 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 69 resolved as shift
WARNING: shift/reduce conflict for AND in state 69 resolved as shift
WARNING: shift/reduce conflict for OR in state 69 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 69 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 69 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 69 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUAL in state 69 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 69 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 69 resolved as shift
WARNING: shift/reduce conflict for POW in state 69 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 70 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 70 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 70 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 70 resolved as shift
WARNING: shift/reduce conflict for AND in state 70 resolved as shift
WARNING: shift/reduce conflict for OR in state 70 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 70 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 70 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 70 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUAL in state 70 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 70 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 70 resolved as shift
WARNING: shift/reduce conflict for POW in state 70 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 79 resolved as shift
